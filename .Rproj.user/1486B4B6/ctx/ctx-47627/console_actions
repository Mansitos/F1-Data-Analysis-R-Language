{
    "data" : [
        "# Plot top piloti per performance",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance)) %>% filter(races>20)",
        "> ",
        "data",
        "> ",
        "",
        "> ",
        "ggplot(data=data[0:20,],aes(x= reorder(full_name,performance),y=performance)) +",
        "+ ",
        "  geom_bar(aes(fill=performance),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"performance\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "",
        "> ",
        "# Plot top piloti per performance con BONUS",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20)",
        "> ",
        "data",
        "> ",
        "",
        "> ",
        "ggplot(data=data[0:20,],aes(x= reorder(full_name,performance_with_bonus),y=performance_with_bonus)) +",
        "+ ",
        "  geom_bar(aes(fill=performance_with_bonus),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"performance_with_bonus\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "",
        "> ",
        "######################## RELAZIONE ########################",
        "> ",
        "",
        "> ",
        "# wins plot",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(wins))",
        "> ",
        "",
        "> ",
        "x = ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-wins),y=wins)) +",
        "+ ",
        "  geom_bar(aes(fill=wins),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0.2, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$wins, n = 10)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Races won: top 20 drivers\")",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(championship)) %>% filter(championship>0)",
        "> ",
        "",
        "> ",
        "# title plot",
        "> ",
        "y = ggplot(data=data,aes(x= reorder(full_name,-championship),y=championship)) +",
        "+ ",
        "  geom_bar(aes(fill=championship),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$championship, n = 5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"World titles: drivers standings\")",
        "> ",
        "",
        "> ",
        "grid.arrange(x,y, ncol=2,widths=c(0.75,1))",
        "> ",
        "",
        "> ",
        "# points per win over year plot",
        "> ",
        "ggplot(data=season_rank_system_data[],aes(x= reorder(year,year),y=points_per_win)) +",
        "+ ",
        "  geom_bar(position = \"dodge\", aes(fill=points_per_win),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=90, vjust=0.25, hjust=1,size=8), plot.margin = margin(0.2, 0.75, 0, 0, \"cm\")) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Points for a win over time\")",
        "> ",
        "# plot punti pre vs punti normalized",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(tot_points))",
        "> ",
        "",
        "> ",
        "x = ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-tot_points),y=tot_points)) +",
        "+ ",
        "  geom_bar(aes(fill=tot_points),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$tot_points, n = 10)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Total points: top 20 drivers\")",
        "> ",
        "",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(tot_points_new))",
        "> ",
        "",
        "> ",
        "y =ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-tot_points_new),y=tot_points_new)) +",
        "+ ",
        "  geom_bar(aes(fill=tot_points_new),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$tot_points_new, n = 10)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Total points (with normalized data): top 20 drivers\")",
        "> ",
        "",
        "> ",
        "grid.arrange(x,y, ncol=2,widths=c(1,1))",
        "> ",
        "# plot podiums and poles",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(podiums))",
        "> ",
        "",
        "> ",
        "x = ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-podiums),y=podiums)) +",
        "+ ",
        "  geom_bar(aes(fill=podiums),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$podiums, n = 10)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Total podiums: top 20 drivers\")",
        "> ",
        "",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(pole_positions))",
        "> ",
        "",
        "> ",
        "y =ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-pole_positions),y=pole_positions)) +",
        "+ ",
        "  geom_bar(aes(fill=pole_positions),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$pole_positions, n = 10)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Total pole positions: top 20 drivers\")",
        "> ",
        "",
        "> ",
        "grid.arrange(x,y, ncol=2,widths=c(1,1))",
        "> ",
        "# plot of ratios/rates",
        "> ",
        "data = driver_stats %>% filter(races > 20)",
        "> ",
        "",
        "> ",
        "data = data %>% arrange(desc(win_rate))",
        "> ",
        "",
        "> ",
        "x = ggplot(data=data[0:15,],aes(x= reorder(full_name,-win_rate),y=win_rate)) +",
        "+ ",
        "  geom_bar(aes(fill=win_rate),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$win_rate, n = 5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Win rate\")",
        "> ",
        "",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(podium_rate))",
        "> ",
        "",
        "> ",
        "y =ggplot(data=data[0:15,],aes(x= reorder(full_name,-podium_rate),y=podium_rate)) +",
        "+ ",
        "  geom_bar(aes(fill=podium_rate),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$podium_rate, n = 5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Podium rate\")",
        "> ",
        "",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(points_ratio))",
        "> ",
        "",
        "> ",
        "z =ggplot(data=data[0:15,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +",
        "+ ",
        "  geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$points_ratio, n = 5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Points rate\")",
        "> ",
        "",
        "> ",
        "driver_stats = driver_stats %>% arrange(desc(pole_ratio))",
        "> ",
        "",
        "> ",
        "w=ggplot(data=data[0:15,],aes(x= reorder(full_name,-pole_ratio),y=pole_ratio)) +",
        "+ ",
        "  geom_bar(aes(fill=pole_ratio),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = pretty(driver_stats$pole_ratio, n = 5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Pole positions rate\")",
        "> ",
        "",
        "> ",
        "grid.arrange(x,y,z,w, ncol=2,nrow=2,widths=c(1,1))",
        "> ",
        "# top 20 driver of all time",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance)) %>% filter(races>20)",
        "> ",
        "",
        "> ",
        "ggplot(data=data[0:20,],aes(x= reorder(full_name,performance),y=performance)) +",
        "+ ",
        "  geom_bar(aes(fill=performance),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Most dominant F1 drivers of all time\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "ggplot(data=retire_per_year_stats[],aes(x= reorder(year,year),y=1-retire_ratio)) +",
        "+ ",
        "  geom_bar(position = \"dodge\", aes(fill=retire_ratio),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=90, vjust=0.25, hjust=1,size=8), plot.margin = margin(0.2, 0.75, 0, 0, \"cm\")) +",
        "+ ",
        "  scale_y_continuous(breaks = seq(0,1,0.1))+",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Probability to finish a race without having a mechanical failure over time\")",
        "> ",
        "# top 20 driver of all time with car reliability BONUS",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20)",
        "> ",
        "",
        "> ",
        "ggplot(data=data[0:20,],aes(x= reorder(full_name,performance_with_bonus),y=performance_with_bonus)) +",
        "+ ",
        "  geom_bar(aes(fill=performance_with_bonus),stat = 'identity', show.legend = FALSE) +",
        "+ ",
        "  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +",
        "+ ",
        "  labs(x=\"\",y=\"\",title=\"Most dominant F1 drivers of all time with mechanical failures bonus\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>10) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = driver_stats %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "data ",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>10) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = driver_stats %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>10) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "data",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "data = data[-2]",
        "> ",
        " data",
        "[38;5;246m# A tibble: 250 x 18[39m\n   Driver `Races started` `Races complete~ Retirements  Wins `Win rate` `2nd` `3rd` Podiums `Podium rate` `Points scored` `Points scored ~ `Points rate` `Pole positions` `Pole rate` `2nd in grid`\n   [3m[38;5;246m<chr>[39m[23m            [3m[38;5;246m<int>[39m[23m            [3m[38;5;246m<dbl>[39m[23m       [3m[38;5;246m<dbl>[39m[23m [3m[38;5;246m<int>[39m[23m      [3m[38;5;246m<dbl>[39m[23m [3m[38;5;246m<int>[39m[23m [3m[38;5;246m<int>[39m[23m   [3m[38;5;246m<int>[39m[23m         [3m[38;5;246m<dbl>[39m[23m           [3m[38;5;246m<dbl>[39m[23m            [3m[38;5;246m<dbl>[39m[23m         [3m[38;5;246m<dbl>[39m[23m            [3m[38;5;246m<int>[39m[23m       [3m[38;5;246m<dbl>[39m[23m         [3m[38;5;246m<int>[39m[23m\n[38;5;250m 1[39m Juan ~              58               44          14    24      0.414    10     1      35         0.603            279.              873         0.602               29       0.5              13\n[38;5;250m 2[39m Alber~              36               22          14    13      0.361     4     0      17         0.472            140               443         0.492               14       0.389             7\n[38;5;250m 3[39m Jim C~              73               50          23    25      0.342     1     6      32         0.438            274               839         0.460               34       0.466             8\n[38;5;250m 4[39m Ayrto~             162              108          54    41      0.253    23    16      80         0.494            614              [4m1[24m881         0.464               65       0.401            22\n[38;5;250m 5[39m Lewis~             266              242          24    95      0.357    40    30     165         0.620           [4m3[24m778              [4m4[24m119         0.619               98       0.368            60\n[38;5;250m 6[39m Micha~             308              241          67    91      0.296    43    21     155         0.503           [4m1[24m566              [4m3[24m890         0.505               68       0.221            48\n[38;5;250m 7[39m Alain~             202              143          59    51      0.252    35    20     106         0.525            798.             [4m2[24m483         0.492               33       0.163            53\n[38;5;250m 8[39m Jacki~             100               63          37    27      0.27     11     5      43         0.43             360              [4m1[24m109         0.444               17       0.17             16\n[38;5;250m 9[39m Nino ~              37               27          10     5      0.135     9     6      20         0.540            127.              447         0.483                6       0.162            11\n[38;5;250m10[39m Stirl~              73               37          36    16      0.219     5     3      24         0.329            186.              616         0.338               17       0.233             9\n[38;5;246m# ... with 240 more rows, and 2 more variables: Performance [3m[38;5;246m<dbl>[38;5;246m[23m, `Performance with mec. fail bonus` [3m[38;5;246m<dbl>[38;5;246m[23m[39m",
        "\n",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data[-2]",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "Errore: Can't subset columns that don't exist.\n[31mx[39m Column `country` doesn't exist.\n[90mRun `rlang::last_error()` to see where the error occurred.[39m\n",
        "> ",
        "data = data[-2,]",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data[-2,]",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "# Test spidercharts con le stats delle nazioni",
        "> ",
        "",
        "> ",
        "max_drivers                = max(country_stats$drivers)",
        "> ",
        "max_constr                 = max(country_stats$constructors)",
        "> ",
        "max_held_races             = max(country_stats$held_races)",
        "> ",
        "max_circuits_used          = max(country_stats$circuits_used)",
        "> ",
        "max_held_races_by_drivers  = max(country_stats$held_races_by_drivers)",
        "> ",
        "max_held_seasons_by_constr = max(country_stats$held_seasons_by_constr)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "maxs = list(max_drivers,max_constr,max_held_races,max_circuits_used,max_held_races_by_drivers,max_held_seasons_by_constr)",
        "> ",
        "mins = list(0,0,0,0,0,0)",
        "> ",
        "",
        "> ",
        "n_country = 6 # numero di nazioni per cui plottare i grafici",
        "> ",
        "country_stats = country_stats %>% arrange(desc(score)) # ordino in base al criterio che considero migliore (per il ranking 1°,2°,3° etc)",
        "> ",
        "",
        "> ",
        "layout.matrix = matrix(c(1,2,3,4), nrow=1,ncol=4)",
        "> ",
        "layout(mat = layout.matrix, heights = c(1), widths = c(2,2,2,2))",
        "> ",
        "c <- par(mar=c(0.5,0,2,0),oma=c(0,0,0,0))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "for(i in 1:4){",
        "+ ",
        "  ",
        "+ ",
        "test_data = country_stats[i,] %>% select(drivers,constructors,held_races,circuits_used,held_races_by_drivers,held_seasons_by_constr)",
        "+ ",
        "name = country_stats$country[i]",
        "+ ",
        "",
        "+ ",
        "data = rbind(maxs,mins,test_data)",
        "+ ",
        "",
        "+ ",
        "colnames(data) <- c(paste(\"Drivers \\n\",\"[\",test_data[1,][1],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"Constructors \\n\",\"[\",test_data[1,][2],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"\\n\\n Race weekends \\n\",\"[\",test_data[1,][3],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"Circuits\\n\",\"[\",test_data[1,][4],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"\\n\\n Held races \\n by drivers\\n\",\"[\",test_data[1,][5],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\" Held seasons \\n  by constructors \\n\",\"[\",test_data[1,][6],\"]\\n\",sep=\"\"))",
        "+ ",
        "",
        "+ ",
        "radarchart(data, axistype=0,",
        "+ ",
        "           ",
        "+ ",
        "    #polygon",
        "+ ",
        "    pcol=rgb(0/255,0/255,0/255,0.9) , pfcol=rgb(225/255,225/255,77/255,0.4) , plwd=3,",
        "+ ",
        "",
        "+ ",
        "    #grid",
        "+ ",
        "    cglcol=\"grey\", cglty=3, axislabcol=\"grey\", cglwd=1,",
        "+ ",
        " ",
        "+ ",
        "    #labels",
        "+ ",
        "    vlcex=0.9,",
        "+ ",
        "    title=paste(name,\" (\",toString(i),\"°)\",sep=\"\")",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# reset dei par e pulizia ambiente",
        "> ",
        "par(c)",
        "> ",
        "rm(c,layout.matrix,maxs,mins,test_data)",
        "> ",
        "# Test spidercharts con le stats delle nazioni",
        "> ",
        "",
        "> ",
        "max_drivers                = max(country_stats$drivers)",
        "> ",
        "max_constr                 = max(country_stats$constructors)",
        "> ",
        "max_held_races             = max(country_stats$held_races)",
        "> ",
        "max_circuits_used          = max(country_stats$circuits_used)",
        "> ",
        "max_held_races_by_drivers  = max(country_stats$held_races_by_drivers)",
        "> ",
        "max_held_seasons_by_constr = max(country_stats$held_seasons_by_constr)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "maxs = list(max_drivers,max_constr,max_held_races,max_circuits_used,max_held_races_by_drivers,max_held_seasons_by_constr)",
        "> ",
        "mins = list(0,0,0,0,0,0)",
        "> ",
        "",
        "> ",
        "n_country = 6 # numero di nazioni per cui plottare i grafici",
        "> ",
        "country_stats = country_stats %>% arrange(desc(score)) # ordino in base al criterio che considero migliore (per il ranking 1°,2°,3° etc)",
        "> ",
        "",
        "> ",
        "layout.matrix = matrix(c(1,2,3,4), nrow=1,ncol=4)",
        "> ",
        "layout(mat = layout.matrix, heights = c(1), widths = c(2,2,2,2))",
        "> ",
        "c <- par(mar=c(0.5,0,2,0),oma=c(0,0,0,0))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "for(i in 1:4){",
        "+ ",
        "  ",
        "+ ",
        "test_data = country_stats[i,] %>% select(drivers,constructors,held_races,circuits_used,held_races_by_drivers,held_seasons_by_constr)",
        "+ ",
        "name = country_stats$country[i]",
        "+ ",
        "",
        "+ ",
        "data = rbind(maxs,mins,test_data)",
        "+ ",
        "",
        "+ ",
        "colnames(data) <- c(paste(\"Drivers \\n\",\"[\",test_data[1,][1],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"Constructors \\n\",\"[\",test_data[1,][2],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"\\n\\n Race weekends \\n\",\"[\",test_data[1,][3],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"Circuits\\n\",\"[\",test_data[1,][4],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\"\\n\\n Held races \\n by drivers\\n\",\"[\",test_data[1,][5],\"]\",sep=\"\"),",
        "+ ",
        "                    paste(\" Held seasons \\n  by constructors \\n\",\"[\",test_data[1,][6],\"]\\n\",sep=\"\"))",
        "+ ",
        "",
        "+ ",
        "radarchart(data, axistype=0,",
        "+ ",
        "           ",
        "+ ",
        "    #polygon",
        "+ ",
        "    pcol=rgb(0/255,0/255,0/255,0.9) , pfcol=rgb(225/255,225/255,77/255,0.4) , plwd=3,",
        "+ ",
        "",
        "+ ",
        "    #grid",
        "+ ",
        "    cglcol=\"grey\", cglty=3, axislabcol=\"grey\", cglwd=1,",
        "+ ",
        " ",
        "+ ",
        "    #labels",
        "+ ",
        "    vlcex=0.9,",
        "+ ",
        "    title=paste(name,\" (\",toString(i),\"°)\",sep=\"\")",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# reset dei par e pulizia ambiente",
        "> ",
        "par(c)",
        "> ",
        "rm(c,layout.matrix,maxs,mins,test_data)",
        "> ",
        "country_stats",
        "[38;5;246m# A tibble: 49 x 8[39m\n   country drivers circuits_used held_races constructors held_races_by_drivers held_seasons_by_constr score\n   [3m[38;5;246m<chr>[39m[23m     [3m[38;5;246m<int>[39m[23m         [3m[38;5;246m<int>[39m[23m      [3m[38;5;246m<int>[39m[23m        [3m[38;5;246m<int>[39m[23m                 [3m[38;5;246m<int>[39m[23m                  [3m[38;5;246m<int>[39m[23m [3m[38;5;246m<dbl>[39m[23m\n[38;5;250m 1[39m UK          165             4         75           86                  [4m4[24m286                    476 224. \n[38;5;250m 2[39m Italy        99             4        100           31                  [4m3[24m396                    209 142. \n[38;5;250m 3[39m France       73             7         61           12                  [4m2[24m916                     84  87.9\n[38;5;250m 4[39m USA         157            10         70           39                  [4m1[24m279                    124  75.5\n[38;5;250m 5[39m Germany      49             3         79           10                  [4m2[24m296                     41  71.2\n[38;5;250m 6[39m Brazil       32             2         47            1                  [4m1[24m953                      8  47.2\n[38;5;250m 7[39m Spain        15             6         57            1                   734                      3  29.1\n[38;5;250m 8[39m Belgium      23             3         65            1                   591                      1  28.6\n[38;5;250m 9[39m Japan        19             3         37            5                   591                     24  26.9\n[38;5;250m10[39m Austria      15             3         34            1                   690                     16  25.4\n[38;5;246m# ... with 39 more rows[39m",
        "\n",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_per_constr)",
        "Errore: Can't subset columns that don't exist.\n[31mx[39m Column `held_seasons_per_constr` doesn't exist.\n[90mRun `rlang::last_error()` to see where the error occurred.[39m\n",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr)",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr)",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 4)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 50)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 1)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 5000)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 500)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400,width = 500)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400,width = 1000)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400,width = 1000)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400,width = 1000)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400,width = 1000)",
        "> ",
        "",
        "> ",
        "data = country_stats  %>% arrange(desc(score))",
        "> ",
        "",
        "> ",
        "data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Country\",\"Score\",\"Circuitrs\",\"Race weekends\",\"Drivers\",\"Held races by drivers\",\"Constructors\",\"Held seasons by constructors\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400,width = 1000)",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 400)",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized data)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 500)",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,5)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,5))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized data)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 500)",
        "> ",
        "",
        "> ",
        "data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)",
        "> ",
        "",
        "> ",
        "data = data %>% select(full_name,country,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)",
        "> ",
        "",
        "> ",
        "data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))",
        "> ",
        "",
        "> ",
        "colnames(data)=c(\"Driver\",\"Nationality\",\"Races started\",\"Races completed\",\"Retirements\",\"Wins\",\"Win rate\",\"2nd\",\"3rd\",\"Podiums\",\"Podium rate\",\"Points scored\",\"Points scored (normalized data)\",\"Points rate\",\"Pole positions\",\"Pole rate\",\"2nd in grid\",\"Performance\",\"Performance with mec. fail bonus\")",
        "> ",
        "",
        "> ",
        "reactable(data,searchable = TRUE,bordered = TRUE,height = 500)",
        "> ",
        "constr_stats",
        "[38;5;246m# A tibble: 211 x 8[39m\n   constructorId constructorRef name       country     held_seasons win_seasons seasons_win_ratio championship\n           [3m[38;5;246m<dbl>[39m[23m [3m[38;5;246m<chr>[39m[23m          [3m[38;5;246m<chr>[39m[23m      [3m[38;5;246m<chr>[39m[23m              [3m[38;5;246m<int>[39m[23m       [3m[38;5;246m<int>[39m[23m             [3m[38;5;246m<dbl>[39m[23m        [3m[38;5;246m<int>[39m[23m\n[38;5;250m 1[39m             6 ferrari        Ferrari    Italy                 71          16            0.225            16\n[38;5;250m 2[39m             1 mclaren        McLaren    UK                    51           8            0.157             8\n[38;5;250m 3[39m             3 williams       Williams   UK                    45           9            0.2               9\n[38;5;250m 4[39m            32 team_lotus     Team Lotus UK                    29           4            0.138             4\n[38;5;250m 5[39m            25 tyrrell        Tyrrell    UK                    29           1            0.034[4m5[24m            1\n[38;5;250m 6[39m             4 renault        Renault    France                24           2            0.083[4m3[24m            2\n[38;5;250m 7[39m            66 brm            BRM        UK                    23           1            0.043[4m5[24m            1\n[38;5;250m 8[39m            15 sauber         Sauber     Switzerland           22           0            0                 0\n[38;5;250m 9[39m            34 brabham        Brabham    UK                    22           0            0                 0\n[38;5;250m10[39m            18 minardi        Minardi    Italy                 21           0            0                 0\n[38;5;246m# ... with 201 more rows[39m",
        "\n",
        "> ",
        "library(gapminder)",
        "Warning message:\n",
        "package ‘gapminder’ was built under R version 4.0.3 \n",
        "> ",
        "install.packages(\"gapminder\")",
        "WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:\n\nhttps://cran.rstudio.com/bin/windows/Rtools/\n",
        "Warning in install.packages :\n  package ‘gapminder’ is in use and will not be installed\n",
        "> ",
        "constr_stats",
        "[38;5;246m# A tibble: 211 x 8[39m\n   constructorId constructorRef name       country     held_seasons win_seasons seasons_win_ratio championship\n           [3m[38;5;246m<dbl>[39m[23m [3m[38;5;246m<chr>[39m[23m          [3m[38;5;246m<chr>[39m[23m      [3m[38;5;246m<chr>[39m[23m              [3m[38;5;246m<int>[39m[23m       [3m[38;5;246m<int>[39m[23m             [3m[38;5;246m<dbl>[39m[23m        [3m[38;5;246m<int>[39m[23m\n[38;5;250m 1[39m             6 ferrari        Ferrari    Italy                 71          16            0.225            16\n[38;5;250m 2[39m             1 mclaren        McLaren    UK                    51           8            0.157             8\n[38;5;250m 3[39m             3 williams       Williams   UK                    45           9            0.2               9\n[38;5;250m 4[39m            32 team_lotus     Team Lotus UK                    29           4            0.138             4\n[38;5;250m 5[39m            25 tyrrell        Tyrrell    UK                    29           1            0.034[4m5[24m            1\n[38;5;250m 6[39m             4 renault        Renault    France                24           2            0.083[4m3[24m            2\n[38;5;250m 7[39m            66 brm            BRM        UK                    23           1            0.043[4m5[24m            1\n[38;5;250m 8[39m            15 sauber         Sauber     Switzerland           22           0            0                 0\n[38;5;250m 9[39m            34 brabham        Brabham    UK                    22           0            0                 0\n[38;5;250m10[39m            18 minardi        Minardi    Italy                 21           0            0                 0\n[38;5;246m# ... with 201 more rows[39m",
        "\n",
        "> ",
        "View(constr_stats)",
        "> ",
        "library(gganimate)",
        "Error in library(gganimate) : there is no package called ‘gganimate’\n",
        "> ",
        "install.packages(\"gganimate\")",
        "WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:\n\nhttps://cran.rstudio.com/bin/windows/Rtools/\n",
        "Installing package into ‘C:/Users/Mansitos_Picci/Documents/R/win-library/4.0’\n(as ‘lib’ is unspecified)\n",
        "also installing the dependency ‘plyr’\n\n",
        "provo con l'URL 'https://cran.rstudio.com/bin/windows/contrib/4.0/plyr_1.8.6.zip'\n",
        "Content type 'application/zip'",
        " length 1496019 bytes (1.4 MB)\n",
        "downloaded 1.4 MB\n\n",
        "provo con l'URL 'https://cran.rstudio.com/bin/windows/contrib/4.0/gganimate_1.0.7.zip'\n",
        "Content type 'application/zip'",
        " length 1600162 bytes (1.5 MB)\n",
        "downloaded 1.5 MB\n\n",
        "package ‘plyr’ successfully unpacked and MD5 sums checked\npackage ‘gganimate’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\Mansitos_Picci\\AppData\\Local\\Temp\\RtmpOqawNf\\downloaded_packages\n\nRestarting R session...\n\n",
        "Errore: C stack usage  15922800 is too close to the limit\n",
        "Error saving session (options): R code execution error\n"
    ],
    "type" : [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3
    ]
}