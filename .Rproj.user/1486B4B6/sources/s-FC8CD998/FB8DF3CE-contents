---
title: "A journey through 71 years of Formula 1"
author: "Andrea Mansi - 137857 - Università degli Studi di Udine"
date: "February 16, 2021"
output: html_document
---

```{r setup, include = TRUE, echo = FALSE, message=FALSE, warning=FALSE}

# CODE CHUNKS MUST BE EXECUTED SEQUENTIALLY

# Portions of comments are in italian, report is in english.

knitr::opts_chunk$set(echo = TRUE)

# true -> knitting of the report, code chunks and tests are not included
# false -> knit all the code and tests + report at the end of the document
knit_report = TRUE

# if false -> gif animations render skipped (they are very time consuming)
render_anim = FALSE
```


```{r, include = !knit_report, warning=FALSE,message=FALSE}
# Loading libraries

library(ggplot2) # for graphs
library(readr) # for csvs
library(tibble) # for better csvs
library(dplyr) # for queries
library(fmsb) # spidercharts
library(viridis) # for colors
library(wordcloud) # worldcloud plots
library(wesanderson) # for colors
library(gridExtra) # for nice layouts
library("rnaturalearth") # world data for ggplot map
library("rnaturalearthdata") # world data for ggplot map
library(reactable) # nice tables
library(gganimate) # for gif renders (ggplot2)
library(visNetwork) # cool interactive networks :)
```

```{r, include = !knit_report,message=FALSE,warning=FALSE}
# Loading csvs data

# NB: errore in riga 4376 dataset driverStand: corretto manualmente
# NB: errore in riga 23765 dataset results: corretto manualmente
# NB: errore dataset driverstandings, convertito int txt e funziona...

circuits <- as_tibble(read_csv("data\\circuits.csv"))
constrRes <- as_tibble(read_csv("data\\constructorResults.csv"))
constr <- as_tibble(read_csv("data\\constructors.csv"))
constrStand <- as_tibble(read_csv("data\\constructorStandings.csv"))
drivers <- as_tibble(read_csv("data\\drivers.csv"))
driverStand <- as_tibble(read_csv("data\\driverStandings.txt"))
lapTimes <- as_tibble(read_csv("data\\lapTimes.csv"))
pits <- as_tibble(read_csv("data\\pitStops.csv"))
quali <- as_tibble(read_csv("data\\qualifying.csv"))
races <- as_tibble(read_csv("data\\races.csv"))
results <- as_tibble(read_csv("data\\results.csv"))
seasons <- as_tibble(read_csv("data\\seasons.csv"))
status <- as_tibble(read_csv("data\\status.csv"))

```

```{r,include = !knit_report, warning=FALSE,message=FALSE}

# Interrogo i dati per l'estrapolazione di alcune informazioni relative alle nazioni

# --- Pulisco i dataset dalle variabili inutili
circuits = select(circuits,-c(lat,lng,alt,url))
races = select(races,-c(time,url))

# --- Numero totale di circuiti in F1
n_of_circuits = nrow(circuits)

# --- Voglio contare il numero di gare disputate per ciascun circuito
counts <- races %>% count(circuitId) # coppie circuitID - n°gare disputate
circuits <- inner_join(circuits,counts)
circuits <- rename(circuits, held_races=n)
rm(counts)

# --- Voglio contare il numero di gare disputate per ciascuna nazione e il numero di circuiti usati per ciascuna nazione
country_stats <- circuits %>% count(country) %>% rename(circuits_used = n)
counts <- inner_join(circuits,races,by="circuitId") %>% count(country)
country_stats <- inner_join(country_stats,counts,by="country")
country_stats <- rename(country_stats,held_races=n)
rm(counts)


country_stats
```

```{r,include = !knit_report, warning=FALSE,message=FALSE}

# Interrogo i dati per estrapolare alcune informazioni relative ai piloti (per nazione)

# --- Pulisco il dataset dei piloti
drivers = select(drivers,-c(url))

# --- Voglio sapere quanti piloti ci sono stati per ciascuna nazione (escludo quei pochissimi piloti half nation half another nation)
# PROBLEMA -> la nazionalità nei piloti NON è espressa con il nome della nazione... non c'è scritto "Italy" ma "Italian"..... problema per il join....

# Uso un dataset custom creato ad hoc per l'associazione nazionalità - nazione :(
nat_to_country <- as_tibble(read_csv("data\\nat_to_country_custom_v1.csv"))

# --- conto il numero di piloti per nazionalità
nationalities_stats <- drivers %>% count(nationality) %>% rename(drivers=n)
# associo n° piloti alla nazione eseguendo un join per associare nazionalità e nazione
temp <- inner_join(nat_to_country,nationalities_stats,by="nationality")

# rimuovo colonna nationality in quanto non più utile
country_stats <- full_join(temp,country_stats,by="country") %>% select (-c(nationality))

# cleaning data
rm(nationalities_stats,temp)
# Gli NA diventano 0
country_stats[is.na(country_stats)] <- 0

country_stats
```

```{r,include = !knit_report, warning=FALSE,message=FALSE}

# Interrogo i dati per il calcolo di statistiche sui piloti

# a ciascun pilota associo la nazione e rimuovo la nazionalità
driver_stats <- drivers %>% select(c(driverId,forename,surname,nationality,driverRef))
driver_stats <- inner_join(driver_stats,nat_to_country) %>% select(-c(nationality))

# n° gare disputate per pilota
held_races <- results %>% count(driverId) %>% rename(races=n)

# n° vittorie per pilota
wins <- results %>% filter(position==1) %>% count(driverId) %>% rename(wins=n)

# n° 2° posto per pilota
second <- results %>% filter(position==2) %>% count(driverId) %>% rename(second=n)

# n° 3° posto per pilota
third <- results %>% filter(position==3) %>% count(driverId) %>% rename(third=n)

# aggiungo i relativi ai podidati alla tabella iniziale, sostituendo NA con 0
stats <- full_join(held_races,wins,by="driverId")
stats <- full_join(stats,second,by="driverId")
stats <- full_join(stats,third,by="driverId")
stats[is.na(stats)] <- 0 # sostituisco NA con 0
driver_stats <- inner_join(driver_stats,stats)
rm(stats,wins,second,third) # cancello dataset temporaneai

# Calcolo totale podi
driver_stats = driver_stats %>% mutate(podiums=wins+second+third)

# Calcolo totale podium rate
driver_stats = driver_stats %>% mutate(podium_rate=podiums/races)

# Calcolo win rate
driver_stats = driver_stats %>% mutate(win_rate=wins/races)

# calcolo del full_name e rimuovo surname e name
driver_stats = driver_stats %>% mutate(full_name = paste(forename,surname)) %>% select(-surname,-forename)

driver_stats
```

```{r,include = !knit_report, warning=FALSE,message=FALSE, echo=!knit_report,fig.width=10, fig.height=6}

# Plot delle informazioni ricevute per i piloti (top 30)

# races held
driver_stats = driver_stats %>% arrange(desc(races))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-races),y=races)) +
  geom_bar(aes(fill=races),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di gare disputate")

# wins plot

driver_stats = driver_stats %>% arrange(desc(wins))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-wins),y=wins)) +
  geom_bar(aes(fill=wins),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° vittorie")


# 2nd place plot

driver_stats = driver_stats %>% arrange(desc(second))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-second),y=second)) +
  geom_bar(aes(fill=second),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per 2° posto")


# 3nd place plot

driver_stats = driver_stats %>% arrange(desc(third))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-third),y=third)) +
  geom_bar(aes(fill=third),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per 3° posto")

# totale podi plot
driver_stats = driver_stats %>% arrange(desc(podiums))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-podiums),y=podiums)) +
  geom_bar(aes(fill=podiums),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di podi totali")

# per il plot del podium_rate considero i piloti con almeno 100 gare, altrimenti in cima alla classifica avrei piloti con 1 gara vinta su 1 (ad esempio)... troppo facile :)
driver_stats_with_100_races = driver_stats %>% filter(races>99)

# podium rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(podium_rate))
driver_stats_with_100_races

ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-podium_rate),y=podium_rate)) +
  geom_bar(aes(fill=podium_rate),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per rapporto podi/gare disputate (con almeno 100 gare disputate)")

# win rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(win_rate))
driver_stats_with_100_races

ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-win_rate),y=win_rate)) +
  geom_bar(aes(fill=win_rate),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per rapporto vittorie/gare disputate (con almeno 100 gare disputate)")

rm(driver_stats_with_100_races)

```


```{r,include = !knit_report, warning=FALSE,message=FALSE}
# Analisi del punteggio totalizzato dai piloti

# ottengo solo le informazioni utili: tutti i risultati di posizione <= 10 (dove si totalizzano punti)
results$position = as.numeric(results$position)
points = results %>% filter(position<11.0 && position >0) %>% select(driverId,points,raceId,position)

points_stats = aggregate(points$points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_points=x)

# PROBLEMA: CAMPIONATI DIVERSI -> DIVERSI SISTEMI DI PUNTI
# I DATI VANNO NORMALIZZATI PER ESSERE FAIR CON TUTTI I PILOTI DI DIVERSE EPOCHE

# Primo passo: punti per vittoria per ciascun anno (season)
races_year = races %>% select(raceId,year)
points = inner_join(points,races_year,by="raceId")
season_rank_system_data = points %>% filter(position==1) %>% select(year,points)
season_rank_system_data = unique(season_rank_system_data) %>% arrange(desc(year))

# NB: le prime 3 colonne fanno riferimento a 3 casi particolari, CHE VANNO RIMOSSI
# 2014,50 -> introduzione dei punti X2 rimossi subito
# 2019,2020 -> 26 punti (1 bonus extra per fastest lap, verrà analizzato dopo...) rimuovo

season_rank_system_data = season_rank_system_data %>% filter(points!= 50) %>% filter(points!= 26)

# rename colonna points
season_rank_system_data = season_rank_system_data %>% rename(points_per_win=points) %>% group_by(year) %>% top_n(1,points_per_win) #top_n -> tiene il max per ciascun anno

```

```{r,include = !knit_report, warning=FALSE,message=FALSE, echo=!knit_report,fig.width=10, fig.height=6}

ggplot(data=season_rank_system_data[],aes(x= reorder(year,year),y=points_per_win)) +
  geom_bar(position = "dodge", aes(fill=points_per_win),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1,size=9)) +
  labs(x="",y="",title="Punti per vittoria - diversi sistemi di punteggio")

```

```{r,include = !knit_report, warning=FALSE,message=FALSE, echo=!knit_report}

# NORMALIZZAZIONE dei dati relativi ai punteggi. Idea: assegnare a ciascun risultato dal 1950 al 2020 i punti del sistema 2020, così da premiare ciascuna posizione
# con lo stesso numero di punti

# funzione posizione -> punti
calculate_points <- function(position){
  if(is.na(position)){return(0)}
  position = as.numeric(position)
  if(position==1){return(25)}
  else if(position==2){return(18)}
  else if(position==3){return(15)}
  else if(position==4){return(12)}
  else if(position==5){return(10)}
  else if(position==6){return(8)}
  else if(position==7){return(6)}
  else if(position==8){return(4)}
  else if(position==9){return(2)}
  else if(position==10){return(1)}
  return(0)
}

# applico la funzione di conversione dei punti
points$updated_points = lapply(points$position,calculate_points)
points$updated_points = as.numeric(points$updated_points)

# somma dei punti totali (nuovo sistema) per ciascun driver
points_stats_new = aggregate(points$updated_points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_points_new=x)

# aggiungo la colonna a points stats
points_stats = inner_join(points_stats,points_stats_new,by="driverId")
# aggiungo i punteggi a driver stats 
driver_stats = inner_join(driver_stats,points_stats,by="driverId")

# elimino le statistiche dei punti, ormai aggiunge nella tabella driverstats
rm(points_stats_new)
rm(points_stats)
```

```{r,include = !knit_report, warning=FALSE,message=FALSE, echo=!knit_report,fig.width=10, fig.height=6}
driver_stats = driver_stats %>% arrange(desc(tot_points))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_points),y=tot_points)) +
  geom_bar(aes(fill=tot_points),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per punti totali")

driver_stats = driver_stats %>% arrange(desc(tot_points_new))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_points_new),y=tot_points_new)) +
  geom_bar(aes(fill=tot_points_new),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per punti totali - stesso sitema di punteggio per ogni stagione")
```

```{r,include = !knit_report, warning=FALSE,message=FALSE,fig.width=10, fig.height=6}

# Calcolo dei potenziali punti massimi raggiungibili nella carriera di un pilota
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
# Calcolo rapporto punti_totali potenziale_punti
driver_stats = driver_stats %>% mutate(points_ratio = tot_points_new/tot_points_potential)

# Ai fini del plotting, filtro i piloti che abbiano almeno 25 gare disputate
data = driver_stats %>% filter(races > 25)
data = data %>% arrange(desc(points_ratio))
data

ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
  geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="% di punti ottenuti sul potenziale totale")
```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# Analisi dei costruttori

# pulizia dataset + conversione da nazionalità a nazione
constr = constr %>% select (-url)
constr = left_join(constr,nat_to_country) %>% select(-nationality)

# --- Conto il numero di scuderie per nazione
temp <- constr %>% count(country) %>% rename(constructors=n)
# Aggiungo l'informazione alle statistiche delle nazioni
country_stats <- left_join(country_stats,temp,by="country")
# cleaning data
rm(temp)
# Gli NA diventano 0
country_stats[is.na(country_stats)] <- 0

# --- Conto il numero di campionati vinti per scuderia (introdotti nel 1958)
seasons_constr_winners = inner_join(constrStand,races,by='raceId') %>% select(year,position,points,constructorId,raceId) %>% filter(position==1) %>% group_by(year) %>% top_n(1,points) %>% arrange(desc(year)) %>% group_by(year) %>% top_n(1,raceId) %>% select(year,constructorId)

# count per constr
seasons_constr_winners = seasons_constr_winners %>% group_by(constructorId) %>% count(constructorId) %>% rename(championships=n)

# --- Conto il numero di campionati svolti per scuderia (introdotti nel 1958)
seasons_constr_count = unique(inner_join(results,races,by='raceId') %>% select(year,constructorId)) %>% count(constructorId) %>% rename(held_seasons=n) %>% arrange(desc(held_seasons))

# Riunisco i risultati in un unico df
constr_stats = full_join(constr,seasons_constr_count,by="constructorId")
constr_stats = full_join(constr_stats,seasons_constr_winners,by="constructorId")

# NA = 0
constr_stats[is.na(constr_stats)] <- 0
constr_stats

# --- Calcolo win ratio (seasons)
constr_stats = constr_stats %>% mutate(seasons_win_ratio=championships/held_seasons)

# Pulizia env
rm(constr,seasons_constr_winners,seasons_constr_count)
```

```{r,include = !knit_report, warning=FALSE,message=FALSE,fig.width=10, fig.height=6}
# Plotting results

constr_stats = constr_stats %>% arrange(desc(held_seasons))
constr_stats

ggplot(data=constr_stats[1:30,],aes(x= reorder(name,-held_seasons),y=held_seasons)) +
  geom_bar(aes(fill=held_seasons),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 scuderie per numero di campionati svolti")


data = constr_stats %>% arrange(desc(championships)) %>% filter(championships>0)
data

ggplot(data=data,aes(x= reorder(name,-championships),y=championships)) +
  geom_bar(aes(fill=championships),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Classifica scuderie per campionati vinti")


constr_stats = constr_stats %>% arrange(desc(seasons_win_ratio))
constr_stats

ggplot(data=data,aes(x= reorder(name,-seasons_win_ratio),y=seasons_win_ratio)) +
  geom_bar(aes(fill=seasons_win_ratio),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Rapporto campionati vinti/campionati svolti")

```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# Test circular barplot con statistiche scuderie (costruttori)

constr_stats = constr_stats %>% arrange(desc(held_seasons))
constr_stats

ggplot(data=constr_stats[1:30,],aes(x= reorder(name,-held_seasons),y=held_seasons)) +
  geom_bar(aes(fill=held_seasons),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1)) +
  labs(x="",y="",title="Top 30 scuderie per numero di campionati svolti") +
  coord_polar() + ylim(-50,75)

```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# --- Calcolo numero pole position piloti e relativo rateo + plot delle due statistiche
# NB: un pilota (ha avuto la pole position) parte primo se al giro 1 parte in pos 1

pole <- results %>% filter(grid==1) %>% select(driverId,grid) %>% count(driverId) %>% rename(pole_positions=n)

# Aggiungo le statistiche relative alle pole_position ai piloti
driver_stats = full_join(driver_stats,pole)
driver_stats[is.na(driver_stats)] <- 0

# pole ratio, calcolo
driver_stats = driver_stats %>% mutate(pole_ratio=pole_positions/races)

# similmente calcolo partenze dalla seconda posizione per ciascun pilota
pole2 <- results %>% filter(grid==2) %>% select(driverId,grid) %>% count(driverId) %>% rename("second_in_grid"=n)
driver_stats = full_join(driver_stats,pole2)
driver_stats[is.na(driver_stats)] <- 0

# data cleaning
rm(pole,pole2)
```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# pole number plot
driver_stats = driver_stats %>% arrange(desc(pole_positions))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-pole_positions),y=pole_positions)) +
  geom_bar(aes(fill=pole_positions),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di pole positions")

# 2nd in grid number plot
driver_stats = driver_stats %>% arrange(desc(second_in_grid))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-second_in_grid),y=second_in_grid)) +
  geom_bar(aes(fill=second_in_grid),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di partenze in 2° posizione")

# pole ratio plot
data = driver_stats %>% arrange(desc(pole_ratio)) %>% filter(races>25)
data 

ggplot(data=data[1:30,],aes(x= reorder(full_name,-pole_ratio),y=pole_ratio)) +
  geom_bar(aes(fill=pole_ratio),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di pole positions (con almeno 25 gare)")


```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# Test spidercharts con le stats dei driver

max_races =          max(driver_stats$races)
max_wins  =          max(driver_stats$wins)
max_podiums =        max(driver_stats$podiums)
max_tot_points_new = max(driver_stats$tot_points_new)
max_poles=           max(driver_stats$pole_positions)
max_podium_rate=     max(driver_stats$podium_rate)
max_win_rate=        max(driver_stats$win_rate)
max_points_ratio=    max(driver_stats$points_ratio)
max_pole_ratio=      max(driver_stats$pole_ratio)


maxs = list(max_races,max_wins,max_podiums,max_tot_points_new,max_poles,1,1,1,1)
mins = list(0,0,0,0,0,0,0,0,0)

n_drivers = 6 # numero di piloti per cui plottare i grafici
driver_stats = driver_stats %>% arrange(desc(tot_points_new)) # ordino in base al criterio che considero migliore (per il ranking 1°,2°,3° etc)
```

```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=6}
layout.matrix = matrix(c(1,4,2,5,3,6), nrow=2,ncol=3)
layout(mat = layout.matrix, heights = c(1,1), widths = c(2,2,2))
c <- par(mar=c(1,0,2,0),oma=c(0,0,0,0))


for(i in 1:n_drivers){
  
test_data = driver_stats[i,] %>% select(races,wins,podiums,tot_points_new,pole_positions,podium_rate,win_rate,points_ratio,pole_ratio)
name = driver_stats$full_name[i]

data = rbind(maxs,mins,test_data)

colnames(data) <- c("Gare disputate","Vittorie","Podi \n","Totale punti","Totale pole","Rateo podi","Rateo vittorie","Rateo punti \n","Rateo pole")

radarchart(data, axistype=0, 
           
    #polygon
    pcol=rgb(0/255,0/255,0/255,0.9) , pfcol=rgb(255/255,0/255,0/255,0.4) , plwd=3,
    
    #grid
    cglcol="grey", cglty=3, axislabcol="grey", cglwd=1,
 
    #labels
    vlcex=0.9,
    title=paste(name," (",toString(i),"°)",sep="")
    )
}
#reset dei par
par(c)
```



```{r,include = !knit_report, warning=FALSE,message=FALSE,echo=!knit_report,fig.width=10, fig.height=6}

# Plot top nazionalità per num piloti

country_stats = country_stats %>% arrange(desc(drivers))

ggplot(data=country_stats[1:20,],aes(x= reorder(country,-drivers),y=drivers)) +
  geom_bar(aes(fill=drivers),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 20 nazioni per n° di piloti")

# Plot top nazionalità per gare disputate

country_stats = country_stats %>% arrange(desc(held_races))

ggplot(data=country_stats[1:20,],aes(x= reorder(country,-held_races),y=held_races)) +
  geom_bar(aes(fill=held_races),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 20 nazioni per n° di gare disputate")

# Plot top nazionalità per num circuiti

country_stats = country_stats %>% arrange(desc(circuits_used))

ggplot(data=country_stats[1:20,],aes(x= reorder(country,-circuits_used),y=circuits_used)) +
  geom_bar(aes(fill=circuits_used),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 20 nazioni per n° circuiti utilizzati")
```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# --- Aggiorno le statistiche sulle nazioni

# gare svolte da piloti, per nazionalità
held_races_per_country = driver_stats %>% select(country,races)
held_races_per_country = aggregate(held_races_per_country$races,by=list(country=held_races_per_country$country),FUN=sum) %>% rename(held_races_by_drivers=x)

# campionati svolti dai costruttori, per nazionalità
held_seasons_per_constr = aggregate(constr_stats$held_seasons,by=list(country=constr_stats$country),FUN=sum) %>% rename(held_seasons_by_constr=x)

# merge dei dati
country_stats = full_join(country_stats,held_races_per_country,by="country")
country_stats = full_join(country_stats,held_seasons_per_constr,by="country")

country_stats[is.na(country_stats)] <- 0 # NA to zeros

rm(constr_per_country,held_races_per_country,held_seasons_per_constr) # data clean

country_stats
```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# Calcolo di un punteggio per le nazioni ("nazione più significativa/presente nella F1 negli ultimi 70 anni")

# Pesi delle varie statistiche (la somma deve dare 1.0)
weight_drivers = 0;
weight_constr = 0;
weight_held_races = 0.4;
weight_circuits_used = 0.0;
weight_held_races_by_drivers = 0.3;
weight_held_seasons_by_constr = 0.3;

tot_drivers = sum(country_stats$drivers,na.rm = TRUE)
tot_constr = sum(country_stats$constructors,na.rm = TRUE)
tot_held_races = sum(country_stats$held_races,na.rm = TRUE)
tot_circuits_used = sum(country_stats$circuits_used,na.rm = TRUE)
tot_held_races_by_drivers = sum(country_stats$held_races_by_drivers,na.rm = TRUE)
tot_held_seasons_by_constr = sum(country_stats$held_seasons_by_constr,na.rm = TRUE)

score_multiplier=1000

country_stats <- country_stats %>% mutate(score= score_multiplier*(
                                                 (drivers/tot_drivers)*weight_drivers +
                                                 (constructors/tot_constr)*weight_constr +
                                                 (held_races/tot_held_races)*weight_held_races + 
                                                 (circuits_used/tot_circuits_used)*weight_circuits_used +
                                                 (held_races_by_drivers/tot_held_races_by_drivers)*weight_held_races_by_drivers +
                                                 (held_seasons_by_constr/tot_held_seasons_by_constr)*weight_held_seasons_by_constr))

1 == weight_drivers + weight_constr +weight_held_races +weight_circuits_used +weight_held_races_by_drivers +weight_held_seasons_by_constr
sum(country_stats$score,na.rm=TRUE) == score_multiplier
```


```{r,include = !knit_report, warning=FALSE,message=FALSE,echo=!knit_report,fig.width=10, fig.height=6}
# Plot top 25 nazioni per score

country_stats = country_stats %>% arrange(desc(score))
country_stats

ggplot(data=country_stats[0:25,],aes(x= reorder(country,-score),y=score)) +
  geom_bar(aes(fill=score),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 25 nazioni più presenti nella storia della F1")

ggplot(data=country_stats[0:25,],aes(x= reorder(country,score),y=score)) +
  geom_bar(aes(fill=score),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="test horizontal barplot") +
  coord_flip()

```

```{r,include = !knit_report, warning=FALSE,message=FALSE}
# Test spidercharts con le stats delle nazioni

max_drivers                = max(country_stats$drivers)
max_constr                 = max(country_stats$constructors)
max_held_races             = max(country_stats$held_races)
max_circuits_used          = max(country_stats$circuits_used)
max_held_races_by_drivers  = max(country_stats$held_races_by_drivers)
max_held_seasons_by_constr = max(country_stats$held_seasons_by_constr)


maxs = list(max_drivers,max_constr,max_held_races,max_circuits_used,max_held_races_by_drivers,max_held_seasons_by_constr)
mins = list(0,0,0,0,0,0)

n_country = 6 # numero di nazioni per cui plottare i grafici
country_stats = country_stats %>% arrange(desc(score)) # ordino in base al criterio che considero migliore (per il ranking 1°,2°,3° etc)
```

```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=6}

layout.matrix = matrix(c(1,4,2,5,3,6), nrow=2,ncol=3)
layout(mat = layout.matrix, heights = c(1,1), widths = c(2,2,2))
c <- par(mar=c(1,0,2,0),oma=c(0,0,0,0))


for(i in 1:n_country){
  
test_data = country_stats[i,] %>% select(drivers,constructors,held_races,circuits_used,held_races_by_drivers,held_seasons_by_constr)
name = country_stats$country[i]

data = rbind(maxs,mins,test_data)

colnames(data) <- c("Piloti","Costruttori \n","\n\n Gare disputate \n su circuiti","Circuiti","\n\n Gare disputate \n da piloti","Stagioni svolte \n da costruttori \n\n")

radarchart(data, axistype=0,
           
    #polygon
    pcol=rgb(0/255,0/255,0/255,0.9) , pfcol=rgb(0/255,200/255,0/255,0.4) , plwd=3,
    
    #grid
    cglcol="grey", cglty=3, axislabcol="grey", cglwd=1,
 
    #labels
    vlcex=0.9,
    title=paste(name," (",toString(i),"°)",sep="")
    )
}

# reset dei par e pulizia ambiente
par(c)
rm(c,layout.matrix,maxs,mins,test_data)
```

```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=6}
# World cloud test con nazioni

wordcloud(country_stats$country,country_stats$score,scale=c(10,0.5),max.words = length(country_stats$country),random.order=FALSE,rot.per=0.25,ordered.colors = FALSE,random.color = TRUE)

```

```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=5}

library("rnaturalearth")
library("rnaturalearthdata")

world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)

# correggo UK e USA in united kingdom e united states
country_stats_copy = country_stats %>% mutate(country=replace(country,country=="UK","United Kingdom")) %>% mutate(country=replace(country,country=="USA","United States of America"))

world = world %>% rename(country=sovereignt)
world = full_join(world,country_stats_copy, by="country")

ggplot(data = world) +
    geom_sf(aes(fill = score)) +
    scale_color_gradient2() +
    coord_sf(xlim = c(-170, 170), ylim = c(-60, 80), expand = FALSE)
  

ggplot(data = world) +
    geom_sf(aes(fill = score)) +
    scale_color_gradient2() +
    coord_sf(xlim = c(-20, 50), ylim = c(30, 70), expand = FALSE)

# rimozione dei dati
rm(world)
```

```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=5}
# Calcolo KM totali percorsi in F1
# Mi baso sul n° di km da percorrere per ciascun gran premio (in base ai vari regolamenti dei vari anni) (dati trovati su internet)
# il n° è una stima dei km percorsi da ogni pilota (che ha completato la gara) in ogni grand prix di quella stagione, qualora il regolamento prevedesse dei range (vedi 300-500) si è usato il valore medio (400)
grand_prix_km_v1 <- as_tibble(read_csv("data\\grand_prix_km.txt"))
grand_prix_km_v1$year = as.numeric(grand_prix_km_v1$year)

races_km = races %>% select(year,raceId)
races_km = inner_join(races_km,grand_prix_km_v1,by="year")

# Ora per ciascuna gara conto il numero di piloti che l'hanno percorsa
counts = results %>% select(driverId,raceId) %>% count(raceId) %>% rename(partecipants=n)

# Calcolo per ciascuna gara il n° totale di km percorsi dai partecipanti (rimuovendo il 5% di scarto: ritiri, incidenti, etc.)

races_km = inner_join(races_km,counts,by="raceId") %>% mutate(tot_km=partecipants*estimated_tot_km_per_driver*0.9)

tot_f1_km_percorsi = sum(races_km$tot_km)

circonferenza_terra=40075
circonferenza_sole=4379000
distanza_marte_terra=187640000

terre_percorse=tot_f1_km_percorsi/circonferenza_terra
soli_percorsi=tot_f1_km_percorsi/circonferenza_sole
distanze_m_t=tot_f1_km_percorsi/distanza_marte_terra


tot_f1_km_percorsi
terre_percorse
soli_percorsi
distanze_m_t

rm(grand_prix_km_v1,counts,races_km)
```



```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=5}
# Calcolo stagioni vinte da piloti e da costruttori

# ottengo l'anno delle gare
years = races %>% select(year,raceId)

# piloti
seasons_win = inner_join(driverStand,years,by="raceId") %>% select(driverId,year,position,raceId) %>% filter(position==1) %>% group_by(year) %>% top_n(1,raceId) %>% select(driverId,year)

seasons_win_count = seasons_win  %>% group_by(driverId) %>% count(driverId)

driver_stats = full_join(driver_stats,seasons_win_count,by="driverId") %>% rename(championship=n)

driver_stats[is.na(driver_stats)] <- 0 # NA to zeros
rm(seasons_win,seasons_win_count)

```

```{r,include = !knit_report, warning=FALSE,message=FALSE,echo=!knit_report,fig.width=10, fig.height=6}
# Plot top piloti per n° di campionati vinti

data = driver_stats  %>% arrange(desc(championship)) %>% filter(championship>0)
data

ggplot(data=data,aes(x= reorder(full_name,championship),y=championship)) +
  geom_bar(aes(fill=championship),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="Classifica piloti per n° di titoli mondiali") +
  coord_flip()

# Plot top costruttori per n° di campionati vinti
data = constr_stats  %>% arrange(desc(championships)) %>% filter(championships>0)
data

ggplot(data=data,aes(x= reorder(name,championships),y=championships)) +
  geom_bar(aes(fill=championships),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="Classifica costruttori per n° di titoli mondiali") +
  coord_flip()

```
```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=5}
# car reliabilty factor (n° of retire, frequency etc.)
retire_results = results %>% filter(is.na(position)) %>% select(raceId,driverId)

results_per_year = full_join(results,races_year,by="raceId") %>% count(year) %>% rename(tot_results=n)

retire_results_per_year = full_join(retire_results,races_year,by="raceId") %>% count(year) %>% rename(tot_retire=n)

retire_per_year_stats= full_join(results_per_year,retire_results_per_year,by="year") %>% mutate(retire_ratio=tot_retire/tot_results)

# driver retirements
retire_per_driver = retire_results %>% count(driverId )%>% rename(tot_retire=n)

driver_stats = full_join(driver_stats,retire_per_driver,by="driverId")
driver_stats$tot_retire[is.na(driver_stats$tot_retire)] <- 0 # sostituisco NA con 0
driver_stats = driver_stats %>% mutate(completed_races=races-tot_retire)
driver_stats = driver_stats %>% mutate(car_reliability_bonus_percentage = tot_retire/races)
```

```{r,include = !knit_report, warning=FALSE,message=FALSE, echo=!knit_report,fig.width=10, fig.height=6}

ggplot(data=retire_per_year_stats[],aes(x= reorder(year,year),y=1-retire_ratio)) +
  geom_bar(position = "dodge", aes(fill=retire_ratio),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1,size=9)) +
  labs(x="",y="",title="% di completamento gara")

```

```{r,include = !knit_report, warning=FALSE,echo=!knit_report,message=FALSE,fig.width=10, fig.height=5}

# driver performance score
wins_w = 0.25
podiums_w = 0.25
points_w = 0.25
pole_w = 0.25
driver_stats = driver_stats %>% mutate(performance=(wins_w*win_rate+
                                                    podiums_w*podium_rate+
                                                    points_w*points_ratio+
                                                    pole_w*pole_ratio))

# with car reliability bonus
driver_stats = driver_stats %>% mutate(performance_with_bonus = performance*(1+car_reliability_bonus_percentage))

# Plot top piloti per performance
data = driver_stats  %>% arrange(desc(performance)) %>% filter(races>20)
data

ggplot(data=data[0:20,],aes(x= reorder(full_name,performance),y=performance)) +
  geom_bar(aes(fill=performance),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="performance") +
  coord_flip()

# Plot top piloti per performance con BONUS
data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20)
data

ggplot(data=data[0:20,],aes(x= reorder(full_name,performance_with_bonus),y=performance_with_bonus)) +
  geom_bar(aes(fill=performance_with_bonus),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="performance_with_bonus") +
  coord_flip()

```

```{r,include=FALSE}

# ---> This part includes the prose for advanced data science exam (Università degli Studi di Udine) <---

# NB: A large amount of data computed previously to this chunk is used in the report, so in order 
# to execute following chunks, all the previous ones must be executed (sequentially)

##########################################################################################################
########################################## REPORT/RELAZIONE ##############################################
##########################################################################################################
```

# Introduction

In this presentation we will analize data about [Formula One](https://www.formula1.com/) history. We will explore data relating drivers, constructors, countries, circuits, race results etc. We will try to find out which drivers and constructors have dominated this motorsport during these 71 years. In order to evaluate their performance, the presentation proposes a ranking system, based on multiple metrics. The presentation also include some statistics and informations about F1 itself. All the used data are available [here](https://www.kaggle.com/rohanrao/formula-1-world-championship-1950-2020) and consist of 13 csv files. Sourcecode is available [here](https://github.com/Mansitos/Progetto-DataScience-UNI-F1-Data-Analysis-R-Language).

## What is Formula One
Formula One (abbreviated to *F1*) is the highest class of international auto racing for single-seater racing car approved by the [Fédération Internationale de l’Automobile (FIA)](https://www.fia.com/). A Formula One season consists of a series of races, known as *Grands Prix*, which take place worldwide on purpose-built circuits and on closed public roads.

The results of each race are evaluated using a *points system* to determine two annual World Championships: one for drivers and one for constructors.

Formula One cars are considered the fastest regulated road-course racing cars in the world, characterized by very high cornering speeds, achieved through the generation of large amounts of aerodynamic downforce. Most modern F1 cars can achieve peaks of 6.5 lateral g while cornering and approximately top speeds of 360km/h. Tracion control and other driving aids have been banned since 2008.

*You can learn more on how F1 works by watching [this video](https://www.youtube.com/watch?v=twAlqtvVMdc).*

## Some history about F1
Formula One has its roots in the *European Grand Prix championships* of the 1920s and 1930s. The foundation of F1 began in 1946 with the FIA’s standardisations of rules, which was followed by the first *World Championships of Drivers* in 1950.

The history of Formula One is usually divided into eras, but this division is tipycally based on subjective criterias and there is no real official division. We will dive deep into the history of Formula One by introducing some of the most iconic drivers by querying the data and obtaining important results related to their careers, such as number of wins, number of podiums etc.

By analyzing the data we can also obtain some numbers characterizing the history of F1:

```{r, out.width = "1000px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\stats_img.jpg")
```

*You can learn more on F1 history by watching [this video](https://www.youtube.com/watch?v=bbPOCRmpAzY). and [this one](https://www.youtube.com/watch?v=j9LNd-c6OVM&t=0s)*

### First F1 winner
Giuseppe Farina (also known as Giuseppe Antonio “Nino” Farina) won the first F1 race and the first F1 Drivers Championship. Farina drove for Ferrari, Alfa Romeo and Lancia. Let’s see what the data can tell us about this iconic driver:

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\NinoFarina.jpg")
```

*“Because of the crazy way Farina drove only the Holy Virgin was capable of keeping him on the track.” - Juan Manuel Fangio*

### Domination of the 50s by Fangio & Ascari
After the win of the first championship by Farina, the 1950s were dominated by two iconic drivers, Juan Manuel Fangio and Alberto Ascari:

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\Fangio.jpg")
```

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\Ascari.jpg")
```

Fangio’s records remained unbeaten for over 30 years. 1950s are remembered as the deadliest decade in F1, with 15 casualties. Helmeds became mandatory 2 years after the birth of F1, in 1952. Seatbelts became mandatory in 1972.

### The driver of the 1960s
The first driver to beat Fangio’s wins record was Jim Clark, a driver who dominated the circuits in the 1960s.

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\JimClark.jpg")
```

*“Jim Clark was everything I aspired to be, as a racing driver and as a man” - Sir Jackie Stewart*

### The Flying Scot
Clark’s 25 wins record was broken by his greatest admirer: Sir John Jackie Stewart.

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\Stewart.jpg")
```

### The battle between teammates
It took 14 years to break Stewart’s winning record; a new era began, and the progenitor was Alain Prost.

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\Prost.jpg")
```

A famous period of Formula One is the one called the Prost-Senna rivalry. The rivalry between the two pilots was at its most intense during the period in which they were teammates at McLaren (1988-1989).

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\Senna.jpg")
```

Ayrton Seanna is probably the most loved driver in F1 history. Senna has distinguished himself throughout his career and was regarded as a prodigy driver fated to break any record. Unfortunately Senna died aged 34 after a crash during the San Marino Grand Prix on 1 May 1994, the day after the death of another driver: Roland Ratzenberger.

*“Racing, competing, it’s in my blood. It’s part of me, it’s part of my life; I have been doing it all my life and it stands out above everything else.” - Ayrton Senna*

### The Ferrari Era
One of the most iconic driver, if not the most iconic one, is Michael Schumacher, which during his career broke most of the records of this motorsport, settings a new standard which, at the time, was beyond imagination.

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\Shumi.jpg")
```

*“I always thought records were there to be broken. - Michael Schumacher”*

### The Hybrid Era: the birth of a new legend
With the advent of the hybrid era (2014-present), Formula One was dominated by Mercedes and by his top driver Lewis Hamilton.

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\drivers_labels\\Lewis.jpg")
```

Hamilton is the first one to break Shumacher’s records and is currently considered the best F1 driver of our times.

These are some of the drivers considered the greatest of all time by the community. 
Now let's see if by analyzing the data we can confirm that the F1 community is right.

*You can learn more about these iconic drivers by watching [this video](https://www.youtube.com/watch?v=SLvchJt_Y4M&t=0s).*

# Who's the most dominant driver of all time?
Which driver has dominated the circuits during the history of Formula One? It's difficult to tell, but data can help us! Often drivers are compared taking into consideration only simple metrics, such as: *races won*, *world titles*. Surely these metrics reflect the skill of the driver, however they are superficial evaluation criteria. For example, consider the case in which the driver *a* has won 100 races out of 500 and driver *b* has won 70 races out of 120. Would you still say that driver *a* is better than driver *b* just because he has won more races? The data collected during these 71 years can help us to build a more advanced evaluation system, based on multiple parameters, which will allow us to rank drivers in a more transparent and objective way. Let's start by showing some basic drivers summaries which are typically used as the main method of comparison.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=10, fig.height=5,fig.align='center'}
# wins plot
driver_stats = driver_stats %>% arrange(desc(wins))

x = ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-wins),y=wins)) +
  geom_bar(aes(fill=wins),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0.2, "cm")) +
  scale_y_continuous(breaks = seq(5,100,10)) +
  labs(x="",y="",title="Races won: top 20 drivers")

data = driver_stats  %>% arrange(desc(championship)) %>% filter(championship>0)

# title plot
y = ggplot(data=data,aes(x= reorder(full_name,-championship),y=championship)) +
  geom_bar(aes(fill=championship),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm")) +
  scale_y_continuous(breaks = pretty(driver_stats$championship, n = 5)) +
  labs(x="",y="",title="World titles: drivers standings")

grid.arrange(x,y, ncol=2,widths=c(0.75,1))

```

If we take into account only these simple metrics, we would decree Lewis Hamilton and Michael Shumacher as the best drivers in history. But there are some problems to take into consideration to make a more correct evaluation, let's start from the first one.

### The problem with different scoring systems

A significant metric in evaluating the skills of a driver is *amount of points* cumulated during their career. However, there is a problem: *scoring systems* have changed over the years, so it is a little unfair to draw too many conclusions by simply considering the sum of total points scored by each driver. In the following plot whe can see how points systems have changed during the history of Formula One.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=4,fig.align='center'}
# points per win over year plot
ggplot(data=season_rank_system_data[],aes(x= reorder(year,year),y=points_per_win)) +
  geom_bar(position = "dodge", aes(fill=points_per_win),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=90, vjust=0.25, hjust=1,size=8), plot.margin = margin(0.2, 0.5, 0, -0.1, "cm"))+
  scale_y_continuous(breaks = seq(0,25,5)) +
  labs(x="",y="",title="Points for a win over time")
```

You can notice the significant step in maximum points available in 2010 when the points changed from 10 points for a win to 25. 
It's clear how evaluating drivers on the basis of the total points would be a dishonest method towards the drivers who raced prior to 2010.

A more fair approach is the following: recalculate the points awarded by drivers for each race in the history of Formula 1 by always using the same scoring system. To normalize data we will use the currently used score system (but whithout the *fastest lap bonus point* rule, introduced in 2019). The points are awarded for the top 10 drivers in the following pattern: 1st gets 25, 2nd gets 18,15,12,10,8,6,4,2,1. The following two graphs show the ranking of the drivers by total points, before and after the data normalization.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=10, fig.height=5,fig.align='center'}
# plot punti pre vs punti normalized
driver_stats = driver_stats %>% arrange(desc(tot_points))

x = ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-tot_points),y=tot_points)) +
  geom_bar(aes(fill=tot_points),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0, "cm")) +
  scale_y_continuous(breaks = seq(0,4000,250)) +
  labs(x="",y="",title="Total points: top 20 drivers")

driver_stats = driver_stats %>% arrange(desc(tot_points_new))

y =ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-tot_points_new),y=tot_points_new)) +
  geom_bar(aes(fill=tot_points_new),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm")) +
  scale_y_continuous(breaks = seq(0,4250,250)) +
  labs(x="",y="",title="Total points (with normalized data): top 20 drivers")

grid.arrange(x,y, ncol=2,widths=c(1,1))
```
As you can see the results still has Hamilton dominating the standings. However, Michael Schumacher is now much closer and a few more drivers from outside of the recent years have started to be included. 

The results of the 1047 races for each driver allow us to calculate other useful metrics of performance as well, such as: *number of podiums* and *number of pole positions*. In motorsports, the *pole position* is the position at the inside of the front row at the start of a racing event. This position is typically given to the vehicle and driver with the best qualifying time in the trials before the race (the leader in the starting grid). This number-one qualifying driver is referred to as the *pole-sitter*. With *number of podiums* we mean *wins+2nd+3rd*.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=10, fig.height=5,fig.align='center'}
# plot podiums and poles
driver_stats = driver_stats %>% arrange(desc(podiums))

x = ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-podiums),y=podiums)) +
  geom_bar(aes(fill=podiums),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0, "cm")) +
  scale_y_continuous(breaks = pretty(driver_stats$podiums, n = 10)) +
  labs(x="",y="",title="Total podiums: top 20 drivers")

driver_stats = driver_stats %>% arrange(desc(pole_positions))

y =ggplot(data=driver_stats[1:20,],aes(x= reorder(full_name,-pole_positions),y=pole_positions)) +
  geom_bar(aes(fill=pole_positions),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm")) +
  scale_y_continuous(breaks = pretty(driver_stats$pole_positions, n = 10)) +
  labs(x="",y="",title="Total pole positions: top 20 drivers")

grid.arrange(x,y, ncol=2,widths=c(1,1))
```

### The problem with different number of races

Similarly to the problem previously highlighted, related to the different scoring systems for different years, the metrics illustrated (*wins,podiums,pole positions and total points*) are also influenced by a variability factor dependent on the years: the number of races for each season has varied over the years. So for example, if driver *a* partecipated only in a season with 10 races, and driver *b* partecipated only in a season with 20 races, pilot *b* had double the chance of winning races and so on. A more fair approach is to consider the rates of each metric, which means working with *relative frequencies* instead of *absolute frequencies* . New performance metrics are calculated in order to make the number of *held races* irrelevant:

- $win \; rate = \frac{wins}{held \; races}$
- $podium \; rate = \frac{podiums}{held \; races}$
- $points \; rate = \frac{tot \; points \; normalized}{tot \; points \; potential}$
- $pole \; rate = \frac{pole \; positions}{held \; races}$

Where *tot points potential* is equal to 25 times *held races*. We need to set a requirement in order for a driver to be admitted in the comparison. If a driver won 1 race out of 1, starting in pole positions, he would be placed first in every classification, even if he is an irrelevant driver in the history of F1. This threshold will help us removing outliers/insignificant values. The requirement to be included in the comparison is to have participated in at least 20 races (about 1 season).

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=6,fig.align='center'}
# plot of ratios/rates
data = driver_stats %>% filter(races > 20)

data = data %>% arrange(desc(win_rate))

x = ggplot(data=data[0:15,],aes(x= reorder(full_name,-win_rate),y=win_rate)) +
  geom_bar(aes(fill=win_rate),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0, 0, 0, "cm")) +
  scale_y_continuous(breaks = pretty(driver_stats$win_rate, n = 5)) +
  labs(x="",y="",title="Win rate")

driver_stats = driver_stats %>% arrange(desc(podium_rate))

y =ggplot(data=data[0:15,],aes(x= reorder(full_name,-podium_rate),y=podium_rate)) +
  geom_bar(aes(fill=podium_rate),color="black",size=0.35,color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm")) +
  scale_y_continuous(breaks = pretty(driver_stats$podium_rate, n = 5)) +
  labs(x="",y="",title="Podium rate")

driver_stats = driver_stats %>% arrange(desc(points_ratio))

z =ggplot(data=data[0:15,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
  geom_bar(aes(fill=points_ratio),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm")) +
  scale_y_continuous(breaks = pretty(driver_stats$points_ratio, n = 5)) +
  labs(x="",y="",title="Points rate")

driver_stats = driver_stats %>% arrange(desc(pole_ratio))

w=ggplot(data=data[0:15,],aes(x= reorder(full_name,-pole_ratio),y=pole_ratio)) +
  geom_bar(aes(fill=pole_ratio),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm")) +
  scale_y_continuous(breaks = pretty(driver_stats$pole_ratio, n = 5)) +
  labs(x="",y="",title="Pole positions rate")

grid.arrange(x,y,z,w, ncol=2,nrow=2,widths=c(1,1))
```

Now that we have isolated the two main factors of variability between different F1 eras, we can define a more reasonable evaluation criterion based on the rates of the metrics illustrated above. The *performance* metric, which represents a driver's success and skills during their career, is calculated as follows:

$$performance = \frac{1}{4} * win \; rate+ \frac{1}{4}*podium \; rate + \frac{1}{4} *points \; rate+\frac{1}{4}*pole \; rate$$

The choice of weights is questionable and can be considered an objective choice. We may suppose that assigning the same weights to each metric is a compromise that should not penalize any driver.

Like before, only driver with at least 20 held races are considered in the ranking. 

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=4,fig.align='center'}
# top 20 driver of all time
data = driver_stats  %>% arrange(desc(performance)) %>% filter(races>20)

ggplot(data=data[0:20,],aes(x= reorder(full_name,performance),y=performance)) +
  geom_bar(aes(fill=performance),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="Most dominant F1 drivers of all time")+    
  scale_y_continuous(breaks =  seq(0,1,0.1)) + 
  coord_flip()
```

As we can see, on the top of the ranking we have most of the most iconic F1 drivers illustrated in the introduction. Lewis Hamilton is actually the driver with most of the records, but the result we get by reasoning on rates and with normalized data puts Juan Fangio in first position

### Drivers of the past had to struggle against mechanical failures

Another factor which can be considered as penalizing for past drivers is that car reliability improved over time, hence modern drivers have an advantage in their performances metrics. Consider this example: driver *a* and driver *b* started both 100 races. Driver *a* is from the 50s and had 40 mechanical failures: his real win potential is 60. Driver *b* is a recent *F1* driver, and had only 5 mechanical failures: his real win potential is 95. A fairer approach would take this issue into account. In order to isolate the reliability factor we can recalcuate rates by using *completed races* and not the amount of *held races*. The graph below shows how old cars had a higher probability of having a mechanical failure.

```{r,include = FALSE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=4,fig.align='center'}
ggplot(data=retire_per_year_stats[],aes(x= reorder(year,year),y=1-retire_ratio)) +
  geom_bar(position = "dodge", aes(fill=retire_ratio),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=90, vjust=0.25, hjust=1,size=8), plot.margin = margin(0.2, 0.5, 0, -0.1, "cm"))+
  scale_y_continuous(breaks = seq(0,1,0.1))+
  labs(x="",y="",title="Probability to finish a race without having a mechanical failure over time")
```

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=4,fig.align='center'}

# alternative plot, instead of barplot
ggplot(data=retire_per_year_stats[],aes(x= year,y=1-retire_ratio)) +
  geom_line(position = "dodge", aes(fill=retire_ratio),color="black",size=0.55,stat = 'identity', show.legend = FALSE) + geom_point(shape=21, color="blue", fill="#3e80b4", size=2.35) +
  theme(axis.text.x = element_text(angle=90, vjust=0.25, hjust=1,size=8), plot.margin = margin(0.2, 0.5, 0, -0.1, "cm"))+
  scale_y_continuous(breaks = seq(0,1,0.1))+
  scale_x_continuous(breaks = seq(1950,2020,5)) +
  labs(x="",y="",title="Probability to finish a race without having a mechanical failure over time")
```

We can clearly see how modern drivers have had, in proportion to the races started, much fewer retirements due to mechanical problems, therefore, they have an advantage in the calculation related to the *performance* metric. We can fix this problem by introducing a performance multiplier for each driver, instead of recalculate all rates metrics. The bonus is calcualted as follow:

$$bonus = \frac{number \; of \; retirements \; due \; to \; mechanical \; failures}{held \; races}$$

And then we can calculate again their performance score, simply by applying the mechanical failures bonus: $new \; performance = (1+bonus) * performance$. The new ranking is the following:

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=4,fig.align='center'}
# top 20 driver of all time with car reliability BONUS
data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20)

ggplot(data=data[0:20,],aes(x= reorder(full_name,performance_with_bonus),y=performance_with_bonus)) +
  geom_bar(aes(fill=performance_with_bonus),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="Most dominant F1 drivers of all time with mechanical failures bonus") +
  coord_flip()
```

Interestingly by taking this approach the list is dominated by past drivers and not by modern ones. The choiche to include the reliability (mechanical failures) bonus is questionable: some might say that the number of retirements due to mechanical failures does not totally depend on the car reliability but also on the driver's ability to drive it, therefore a better analysis should be performed in this regard.

Table with metrics of all drivers with at least 20 races held (250 out of 850):

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=10, fig.height=3.5}

data = driver_stats  %>% arrange(desc(performance_with_bonus)) %>% filter(races>20) %>% select(-driverId,-car_reliability_bonus_percentage,-tot_points_potential)

data = data %>% select(full_name,country,championship,races,completed_races,tot_retire,wins,win_rate,second,third,podiums,podium_rate,tot_points,tot_points_new,points_ratio,pole_positions,pole_ratio,second_in_grid,performance,performance_with_bonus)

data = data %>% mutate(pole_ratio = round(pole_ratio,4)) %>% mutate(podium_rate = round(podium_rate,4)) %>% mutate(performance = round(performance,4)) %>% mutate(performance_with_bonus = round(performance_with_bonus,4))%>% mutate(win_rate = round(win_rate,4))%>% mutate(points_ratio = round(points_ratio,4))

colnames(data)=c("Driver","Nationality","World titles","Races started","Races completed","Retirements","Wins","Win rate","2nd","3rd","Podiums","Podium rate","Points scored","Points scored (normalized data)","Points rate","Pole positions","Pole rate","2nd in grid","Performance","Performance with mec. fail bonus")

reactable(data,searchable = TRUE,bordered = TRUE,height = 500)
```

# What if we had to give a flag to F1?
Formula One is an international motorsport, but which country was the most present one during these 71 years? Let's find out through the data we have available. Checking the nationality of the 850 drivers, 211 manufacturers and 74 circuits, we count a total of 49 countries involved in this motorsport. Let's visualize the top 6 countries with the highest number of drivers, manufacturers and used circuits.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8.25, fig.height=3,fig.align='center'}
# countries pie charts

# drivers
n=6
data = country_stats %>% arrange(desc(drivers))
data = data[0:n,]
data = data %>% mutate(prop=data$drivers/sum(data$drivers)*100)%>%
  mutate(ypos=cumsum(prop)-0.5*prop)

x = ggplot(data=data,aes(x="", y=prop, fill=reorder(country,drivers)))+
  geom_bar(stat="identity", width=1, color="black") +
  coord_polar("y", start=0)+
  theme_void()+
  scale_fill_brewer(palette="YlOrRd")+
  theme(legend.position="none") +
  geom_text(aes(y = ypos, label = paste(country,"\n(",drivers,")",sep=""),x=1.8), color = "black", size=2.8)  +
  ggtitle("           Drivers")
rm(data)

# constructors
n=6
data = country_stats %>% arrange(desc(constructors))
data = data[0:n,]
data = data %>% mutate(prop=data$constructors/sum(data$constructors)*100)%>%
  mutate(ypos=cumsum(prop)-0.5*prop)


y = ggplot(data=data,aes(x="", y=prop, fill=reorder(country,constructors)))+
  geom_bar(stat="identity", width=1, color="black") +
  coord_polar("y", start=0)+
  theme_void()+
  scale_fill_brewer(palette="YlOrRd")+
  theme(legend.position="none") +
  geom_text(aes(y = ypos+c(0,0,0,0,-0.85,0), label = paste(country,"\n(",constructors,")",sep=""),x=1.8), color = "black", size=2.8) +
  ggtitle("           Constructors")

rm(data)

# circuits
n=6
data = country_stats %>% arrange(desc(circuits_used))
data = data[0:n,]
data = data %>% mutate(prop=data$circuits_used/sum(data$circuits_used)*100)%>%
  mutate(ypos=cumsum(prop)-0.5*prop)

z = ggplot(data=data,aes(x="", y=prop, fill=reorder(country,circuits_used)))+
  geom_bar(stat="identity", width=1, color="black") +
  coord_polar("y", start=0)+
  theme_void()+
  scale_fill_brewer(palette="YlOrRd")+
  theme(legend.position="none") +
  geom_text(aes(y = ypos, label = paste(country,"\n(",circuits_used,")",sep=""),x=1.8), color = "black", size=2.8) +
  ggtitle("           Circuits")

rm(data)

grid.arrange(x,y,z, ncol=3,widths=c(1,1,1))
```

For each of these categories we can extract more meaningful information. We count the total number of races disputed by drivers from each country, constructors’ championships, and the number of race weekends for circuits grouped by nationality. 
In this way we can measure the presence of each country during these 71 years.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=9, fig.height=2.5,fig.align='center'}

country_stats = country_stats %>% arrange(desc(held_races_by_drivers))
x = ggplot(data=country_stats[1:8,],aes(x= reorder(country,-held_races_by_drivers),y=held_races_by_drivers)) +
  geom_bar(aes(fill=held_races_by_drivers),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(country_stats$held_races_by_drivers, n = 5)) +
  labs(x="",y="",title="Held races by drivers")+
  scale_fill_distiller(palette="YlOrRd",direction = 1)

  
country_stats = country_stats %>% arrange(desc(held_seasons_by_constr))
y = ggplot(data=country_stats[1:8,],aes(x= reorder(country,-held_seasons_by_constr),y=held_seasons_by_constr)) +
  geom_bar(aes(fill=held_seasons_by_constr),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(country_stats$held_seasons_by_constr, n = 5)) +
  labs(x="",y="",title="Held seasons by constructors")+
  scale_fill_distiller(palette="YlOrRd",direction = 1)

  
country_stats = country_stats %>% arrange(desc(held_races))
z = ggplot(data=country_stats[1:8,],aes(x= reorder(country,-held_races),y=held_races)) +
  geom_bar(aes(fill=held_races),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.25, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(country_stats$held_races, n = 5)) +
  labs(x="",y="",title="Held race weekends")+
  scale_fill_distiller(palette="YlOrRd",direction = 1)

grid.arrange(x,y,z, ncol=3,widths=c(1,1,1))
```

We can already see how United Kingdom has a very high number of drivers and constructors. If we set up a weighting system based on those three metrics we can decide which nation has been the most present one throughout the history of F1. We will use the following weights:

- $races \; held \; by \; drivers = 0.3$;
- $seasons \; held \; by \; constructors = 0.3$;
- $number \; of \; race \; weekends = 0.4$;

We give the same weight to the factors representing the participation of drivers and constructors, but we give a small bonus to the factor representing where grand prixs were held. This is because a F1 event is held not only by drivers and constructors, but by fans, organizers, first aiders, track technicians etc. The score for each country is computed as follow:

$$score = \frac{4}{10}*number \; of \; race \; weekends + \frac{3}{10}*races \; held \; by \; drivers + \frac{3}{10}*seasons \; held \; by \; constructors$$
We summarize our results with the following *wordcloud* where the dimension of each *contry* depends on its *score*.

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=8, fig.height=5}
# BUG? SOMETIMES SOME WORDS ARE OMMITTED??? FOR SAFETY USE A SAVED ONE WHICH WORKS.

# World cloud test con nazioni
if(TRUE){
wordcloud(country_stats$country,country_stats$score+4,scale=c(12,0.4),max.words = 100,min.freq = 1,random.order=FALSE,rot.per=0.35,ordered.colors = FALSE,random.color = TRUE,colors = brewer.pal(7,"YlOrRd")[c(3,4,4,5,5,6,6,7)])
}

```

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\word_cloud.jpg")
```

We can cleary see how United Kingdom was the most present country in the history of F1. This result is probably justified by the great amount of drivers and constructors
coming from there. A big contribution is also given by the historic [Silverstone Circuit](https://en.wikipedia.org/wiki/Silverstone_Circuit), which hosted 55 races. In second place we find Italy. Its score owes much to the first drivers of the 50s, to the presence of [Ferrari](https://www.ferrari.com/en-US/formula1/team) (the only constructor present in all the championships) and to the [Autodromo Nazionale di Monza](https://en.wikipedia.org/wiki/Autodromo_Nazionale_di_Monza), currently the circuit with the highest number of races hosted (70). After them we have: France, USA, Germany and Brazil.


To get an overall and clearer view, we display our data on a geographic *heatmap*:

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=10, fig.height=4}
world <- ne_countries(scale = "medium", returnclass = "sf")

# correggo UK e USA in united kingdom e united states
country_stats_copy = country_stats %>% mutate(country=replace(country,country=="UK","United Kingdom")) %>% mutate(country=replace(country,country=="USA","United States of America"))

world = world %>% rename(country=sovereignt)
world = full_join(world,country_stats_copy, by="country")

ggplot(data = world) +
    geom_sf(aes(fill = score),color="black",size=0.20) +
    scale_color_gradient2() +
    coord_sf(xlim = c(-170, 170), ylim = c(-60, 80), expand = FALSE)+
    scale_fill_distiller(palette="YlOrRd",direction = 1)+ 
    guides(fill=guide_colorbar(title="Score",frame.colour = "black", ticks.colour = "black"))+
    theme(legend.title=element_text(size=13))
```
Let's have a clooser look into Europe:

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=10, fig.height=4}

ggplot(data = world) +
    geom_sf(aes(fill = score),color="black",size=0.20) +
    scale_color_gradient2() +
    coord_sf(xlim = c(-20, 50), ylim = c(30, 60), expand = FALSE)+
    scale_fill_gradient2(low="#121212", mid="#2a4732", high="#00ff4c")+
    scale_fill_distiller(palette="YlOrRd",direction = 1)+ 
    guides(fill=guide_colorbar(title="Score",frame.colour = "black", ticks.colour = "black"))+
    theme(legend.title=element_text(size=13))

# removing useless data
rm(world)
```

*If you want to learn more on what happens behind the scenes of every grand prix, watch [this video](https://www.youtube.com/watch?v=MH6Loko0BOA)*

### Which country raised the fastest drivers?
Using the data relating to the drivers and their performance, we can compute an estimate of the *average performance* of drivers from each country. We allow to enter the ranking only to countries that have had at least 15 drivers, and we compute the average by taking into consideration only the 15 best drivers for each of them.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=7, fig.height=3,fig.align='center'}
# Average of top 15 drivers performance per country (min 15 drivers)
allowed_countries = country_stats %>% filter(drivers >= 15) %>% select(country) 

allowed_drivers = inner_join(allowed_countries,driver_stats) %>% select("country","performance_with_bonus") %>% group_by(country) %>% top_n(15,performance_with_bonus)
allowed_drivers = unique(allowed_drivers)

counts = allowed_drivers %>% group_by(country) %>% count(country)

medium_performance_per_country = aggregate(allowed_drivers$performance_with_bonus,by=list(country=allowed_drivers$country),FUN=sum) %>% rename(average_perforamnce_with_bonus=x)
medium_performance_per_country = inner_join(medium_performance_per_country,counts,by="country") %>% mutate(average_perforamnce_with_bonus=average_perforamnce_with_bonus/n)

data = medium_performance_per_country  %>% arrange(desc(average_perforamnce_with_bonus))

ggplot(data=data,aes(x= reorder(country,average_perforamnce_with_bonus),y=average_perforamnce_with_bonus)) +
  geom_bar(aes(fill=average_perforamnce_with_bonus),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.5, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(data$average_perforamnce_with_bonus, n = 10)) +
  labs(x="",y="",title="Average performance of top 15 drivers for each country")+
  coord_flip()+
  scale_fill_distiller(palette="YlOrRd",direction = 1)
```
It is curious to note how the ranking is very similar to that of the most present countries. One possible reason is that if a nation has had multiple drivers it is more likely that one of them was very good. It must also be taken into consideration that constructors may prefer to hire drivers of the same nationality, moreover, the constructors themselves often give life to initiatives and projects for the growth and selection of talents in their own territory. Examples are: [Ferrari Driver Academy](https://www.ferrari.com/it-IT/fda) in Italy, [McLaren Young Driver Programme](https://www.mclaren.com/racing/team/young-driver-programme/) in UK.

In the following table we recap the main metrics of the 49 countries that participated in Formula One.

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=12, fig.height=2}

data = country_stats  %>% arrange(desc(score))

data = data %>% select(country,score,circuits_used,held_races,drivers,held_races_by_drivers,constructors,held_seasons_by_constr) %>% mutate(score=round(score,2))

colnames(data)=c("Country","Score","Circuits","Race weekends","Drivers","Held races by drivers","Constructors","Held seasons by constructors")

reactable(data,searchable = TRUE,bordered = TRUE,height = 400)
```

# Which is the most successful constructor of all time?
Formula One is not all about drivers, in fact each of them competes for a constructor (*racing team*) who is responsible for building, designing and researching the car. Obviously the possibility of a driver to win a race or to win the world title also depends on the constructor for which he races. A faster car is better then a slower one! So let's see which constructors have been the most present and winning ones over the 71 years of Formula One. The following animation illustrate the evolution of the n° of held seasons for the 10 constructors which partecipated the most. Some of them are no longer racing nowadays. It's worth to note that the graph starts from 1950 but the *constructors championship* actually has been introduced in 1958.

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=12, fig.height=2}
# Building historical data for constructors (partecipation in seasons)
years=c(1950:2020)

input_data2 = full_join(races_year,results,by="raceId") %>% select(year,constructorId) %>% filter(year>=1950)
input_data2 = unique(input_data2)

constructors_names = constr_stats %>% select(name,constructorId)

history_data = tibble()

for(i in years){
  data = input_data2 %>% filter(year <= i)
  row = data %>% count(constructorId) %>% rename(seasons_held=n) %>% mutate(year=i)
  history_data = rbind(history_data,row)
}

# adding constr name to historical data
history_data <-  right_join(constructors_names,history_data,by="constructorId")

#filter 
n = 10
ok_constr = constr_stats %>% arrange(desc(held_seasons))
ok_constr = ok_constr[0:n,]

history_data_filtered = inner_join(ok_constr,history_data,by="name") %>% mutate(constructorId=constructorId.x) %>% select(-constructorId.y)

history_data_filtered = history_data_filtered %>% mutate(label=paste(name,"-",held_seasons))
```

```{r,eval = render_anim, include=TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=12, fig.height=2}

gif_data = history_data_filtered  %>% ggplot(aes(x=year,y=seasons_held,group=constructorId,color=reorder(label,-held_seasons)))+
    geom_line(size=1.85) +
    geom_point(size=4.5) +
    ggtitle("Historical evolution of n° held seasons for top 10 constructors who participated the most") +
    ylab("n° held seasons") +
    xlab("Year") +
    transition_reveal(year) +
    scale_y_continuous(breaks = seq(0,75,5)) +
    scale_x_continuous(breaks = pretty(history_data_filtered$year, n = 10)) + 
    labs(x="",y="",color='Constructor') + 
    theme(plot.title = element_text(size = 30),legend.title = element_text(size = 22),axis.text=element_text(size=16),legend.text=element_text(size=16))

animate(gif_data, duration = 18, fps = 20, width = 1600, height = 780, renderer = gifski_renderer())
anim_save("held_seasons_by_constructor_evolution.gif")


```

As we can see Ferrari is on top of the ranking (with 71 seasons out of 71 - in fact it's the only one constructor persent from day one), in second position we have McLaren with 51 seasons, and then Williams with 45 seasons. Now let's see who has won the most world titles.

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=12, fig.height=2}
# Building historical data for constructors (win in seasons)
years=c(1958:2020)

# who won each year
input_data2 = full_join(races_year,constrStand,by="raceId") %>% select(year,constructorId,position,raceId) %>% filter(year>=1958) %>% filter(position==1) %>% group_by(year) %>% top_n(1,raceId) %>% select(-raceId,-position)

constructors_names = constr_stats %>% select(name,constructorId)

history_data = tibble()

for(i in years){
  data = input_data2 %>% filter(year <= i)
  rows = data %>% group_by(constructorId)%>% count(constructorId) %>% rename(seasons_won=n) %>% mutate(year=i)
  history_data = rbind(history_data,rows)
}

# adding constr name to historical data
history_data <-  right_join(constructors_names,history_data,by="constructorId")

#filter 
ok_constr = constr_stats %>% arrange(desc(championships))
ok_constr = ok_constr %>% filter(championships>1)

history_data_filtered = inner_join(ok_constr,history_data,by="name") %>% mutate(constructorId=constructorId.x) %>% select(-constructorId.y)

history_data_filtered = history_data_filtered %>% mutate(label=paste(name,"-",championships))
```

```{r,eval = render_anim, include=TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=12, fig.height=2}

gif_data = history_data_filtered  %>% ggplot(aes(x=year,y=seasons_won,group=constructorId,color=reorder(label,-championships)))+
    geom_line(size=1.85) +
    geom_point(size=4.5) +
    ggtitle("Historical evolution of n° constructor championships") +
    ylab("n° constructors championships titles") +
    xlab("Year") +
    transition_reveal(year) +
    scale_y_continuous(breaks = seq(0,16,2)) +
    scale_x_continuous(breaks = c(seq(1950,2020,5))) + 
    labs(x="",y="",color='Constructor') +
    theme(plot.title = element_text(size = 30),legend.title = element_text(size = 22),axis.text=element_text(size=16),legend.text=element_text(size=16))

animate(gif_data, duration = 18, fps = 20, width = 1600, height = 780, renderer = gifski_renderer())
anim_save("won_seasons_by_constructor_evolution.gif")

```

With the following graphs, we summarize the ranking of manufacturers with the highest number of world titles (*constructors's championships*) and the relative *win rate*: ($\frac{world titles}{participations}$).

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=2.5,fig.align='center'}

# Plot top costruttori per n° di campionati vinti and win rate

data = constr_stats  %>% arrange(desc(championships)) %>% filter(championships>0) 

x = ggplot(data=data,aes(x= reorder(name,championships),y=championships)) +
  geom_bar(aes(fill=championships),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=0, hjust=0.5,size=9), plot.margin = margin(0.1, 0, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(data$championships, n = 10)) +
  labs(x="",y="",title="n° of world titles")+
  scale_fill_distiller(palette="YlGn",direction = 1,limits=c(-3,17)) +
  coord_flip()

data = constr_stats  %>% arrange(desc(seasons_win_ratio)) %>% filter(seasons_win_ratio>0)

y= ggplot(data=data,aes(x= reorder(name,seasons_win_ratio),y=seasons_win_ratio)) +
  geom_bar(aes(fill=seasons_win_ratio),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=0.5,size=9), plot.margin = margin(0.1, 0.25, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(data$seasons_win_ratio, n = 10)) +
  labs(x="",y="",title="World titles win rate")+
  scale_fill_distiller(palette="YlGn",direction = 1,limits=c(-0.125,1.1)) +
  coord_flip()

grid.arrange(x,y, ncol=2,widths=c(0.9,1))
```

We notice that [Brawn GP](https://en.wikipedia.org/wiki/Brawn_GP) has as a winning rate of 100%. In fact this team has won the only championship in which it has participated (2009).

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=2.5,fig.align='center'}
# Some constructors metrics

# races won by constructors
wins = results %>% select(raceId,constructorId,position) %>% filter(position==1) %>% count(constructorId) %>% rename(races_won=n)
constr_stats = full_join(constr_stats,wins,by="constructorId")
constr_stats[is.na(constr_stats)] <- 0

second = results %>% select(raceId,constructorId,position) %>% filter(position==2) %>% count(constructorId) %>% rename(second=n)
constr_stats = full_join(constr_stats,second,by="constructorId")
constr_stats[is.na(constr_stats)] <- 0

third = results %>% select(raceId,constructorId,position) %>% filter(position==3) %>% count(constructorId) %>% rename(third=n)
constr_stats = full_join(constr_stats,third,by="constructorId")
constr_stats[is.na(constr_stats)] <- 0

held_races = results %>% select(raceId,constructorId) %>% count(constructorId) %>% rename(held_races=n)
constr_stats = full_join(constr_stats,held_races,by="constructorId")
constr_stats[is.na(constr_stats)] <- 0

pole = results %>% filter(grid==1) %>% select(constructorId,grid) %>% count(constructorId) %>% rename(pole_positions=n)
constr_stats = full_join(constr_stats,pole,by="constructorId")
constr_stats[is.na(constr_stats)] <- 0

constr_stats = constr_stats %>% mutate(podiums=races_won+second+third) %>% mutate(podium_rate=podiums/held_races) %>% mutate(win_rate=races_won/held_races) %>% mutate(pole_rate=pole_positions/held_races)

# points statistics

# ottengo solo le informazioni utili: tutti i risultati di posizione <= 10 (dove si totalizzano punti)
results$position = as.numeric(results$position)
points = results %>% filter(position<11.0 && position >0) %>% select(constructorId,points,raceId,position)

points_stats = aggregate(points$points,by=list(constructorId=points$constructorId),FUN=sum) %>% rename(tot_points=x)

# applico la funzione di conversione dei punti
points$updated_points = lapply(points$position,calculate_points)
points$updated_points = as.numeric(points$updated_points)

# somma dei punti totali (nuovo sistema) per ciascun driver
points_stats_new = aggregate(points$updated_points,by=list(constructorId=points$constructorId),FUN=sum) %>% rename(tot_points_new=x)

# Aggiungo i dati

constr_stats = full_join(constr_stats,points_stats,by="constructorId")
constr_stats = full_join(constr_stats,points_stats_new,by="constructorId")
constr_stats[is.na(constr_stats)] <- 0

constr_stats = constr_stats %>% mutate(points_potential=held_races*25) %>% mutate(points_rate_new=(tot_points_new/points_potential))


# performance computation
constr_stats = constr_stats %>% mutate(performance=0.25*win_rate+0.25*podium_rate+0.25*points_rate_new+0.25*pole_rate)

```

Very similarly to the drivers case, through data analysis we are able to extract some useful information. As we did for drivers, for each constructor we calculate the total amount of scored points with normalized data (same scoring system for each year) in order to setup a fair rating system. We will also count *held races*, *wins*, *podiums* and *poles* and for each of this metric we will calculate the rate (*relative frequency*) in order to to remove the advantage factor for the teams that participated the most. We will then setup a *performance* metric as the one for drivers:


$$performance = \frac{1}{4} * win \; rate+ \frac{1}{4}*podium \; rate + \frac{1}{4} *points \; rate+\frac{1}{4}*pole \; rate$$

Similarly to drivers, only constructor with a minimum of 50 held races are allowed in the comparison. The normalization of data related to the *mechanical failure rate* here is not applied, so there are no bonus to the performance metric. This choice derives from the fact that a construcor with a lower probability of mechanical failure should be rewarded as he is the main responsible for the car. The results are reported in the following diagram:

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=8, fig.height=4,fig.align='center'}
# top 20 constructors of all time with car reliability BONUS
data = constr_stats  %>% arrange(desc(performance)) %>% filter(held_races>50) 

ggplot(data=data[0:20,],aes(x= reorder(name,performance),y=performance)) +
  geom_bar(aes(fill=performance),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="Most dominant F1 constructors of all time") +
  scale_fill_distiller(palette="YlGn",direction = 1,limits=c(-0.03,0.39)) +
  coord_flip()
```

As we can see the ranking is dominated by Mercedes. This result is attributable to the excellent results obtained in recent years. One thing is for certain, in the last years, Mercedes are doing something that's never been seen in the 71-year history of the Formula One World Championship. We've seen similar periods of dominance in the sport before however, such as McLaren's 1988 season, where the stunning MP4/4 won 15 of the 16 races at the hands of Ayrton Senna and Alain Prost. Or in 2002, where Michael Schumacher and Rubens Barrichello combined to win 15 of the 17 races, thus sealing Schumi's historic 5th World Championship, equalling the great Juan Manuel Fangio in the process.

In the following table we recap the main metrics of the 211 constructors that participated in Formula One.
```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=12, fig.height=2}

data = constr_stats  %>% arrange(desc(performance))

data = data %>% select(name,performance,country,held_seasons,championships,held_races,races_won,second,third,podiums,podium_rate,pole_positions,pole_rate,tot_points,tot_points_new,points_rate_new)

data = data %>% mutate(performance=round(performance,4)) %>% mutate(podium_rate=round(podium_rate,4)) %>% mutate(pole_rate=round(pole_rate,4)) %>% mutate(points_rate_new=round(points_rate_new,4)) 

colnames(data)=c("Constructor","Performance","Nationality","Held seasons","World titles","Held races","Wins","2nd","3rd","Podiums","Podium rate","Pole positions","Pole rate","Tot points","Tot points (norm. data)","Points rate (norm. data)")

reactable(data,searchable = TRUE,bordered = TRUE,height = 400)
```

# Formula 1 data seen as a network
We can visualize Formula One's data as a network. In the following interactive graph we represent the connections between pilots and constructors. Each yellow node is a constructor, each red node is a driver and each edge has the following meaning: *x was a driver for constructor y*. You can interact with the graph by dragging the nodes, clicking them to view only its information and zooming it with the mouse scroll. You need to zoom in order to read names.

The network include only the best 50 constructors and the best 70 drivers. The dimension of the nodes are dependent on the performance metric.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=9, fig.height=7,fig.align='center'}

top_c = 50
top_d = 70

allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus) 

constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")

drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")


id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr =  allowed_constr %>% select(name,constructorId)

drivers_constr_arcs = unique(results %>% select(driverId,constructorId))

drivers_constr_arcs = inner_join(drivers_constr_arcs,id_name_constr,by="constructorId")
drivers_constr_arcs = inner_join(drivers_constr_arcs,id_name_drivers,by="driverId")

drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)

nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))

# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))

vis.nodes <- nodes
vis.arcs <- arcs

# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.325)*65
vis.nodes$borderWidth <- 2 # Node border width

vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE

net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
```

By using the full network (all drivers and all constructors) we can get some useful information. By computing the *degree centrality* for each node we can know how many drivers have raced for a manufacturer and for how many manufacturers has a driver raced. The full network has 850+211 nodes and 2117 arcs.

We summarize the results with the following two rankings and two tables.

```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=9, fig.height=7,fig.align='center'}
# iGraph tests
library(igraph)

edges = unique(results %>% select(driverId,constructorId))

id_name_drivers = driver_stats %>% select(full_name,driverId)
id_name_constr =  constr_stats %>% select(name,constructorId)

edges = inner_join(id_name_constr,edges,by="constructorId")
edges = inner_join(id_name_drivers,edges,by="driverId")

edges = edges %>% select(full_name,name) %>% rename(from=full_name,to=name)

dg = graph_from_data_frame(edges, directed=FALSE)
coords = layout_with_fr(dg)

plot(dg, layout=layout.circle, main="What a MESS :o)",
     vertex.size = 3, vertex.color = "black", 
     edge.width = 1, edge.color = "grey",
     vertex.label.cex=0.5) 

degrees = as.data.frame(degree(dg, mode = "total"))
degrees <- cbind(id = rownames(degrees), degrees)
rownames(degrees) <- 1:nrow(degrees)

colnames(degrees)[2] <- "degree"


degrees = degrees %>% rename(full_name=id)
drivers_degrees = inner_join(degrees,id_name_drivers,by="full_name")

degrees = degrees %>% rename(name=full_name)
constr_degrees = inner_join(degrees,id_name_constr,by="name")

degrees = degrees %>% rename(id=name)
```


```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=10, fig.height=4,fig.align='center'}
data = drivers_degrees  %>% arrange(desc(degree))

x = ggplot(data=data[1:20,],aes(x= reorder(full_name,degree),y=degree)) +
  geom_bar(aes(fill=degree),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.5, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(data$degree, n = 10)) +
  labs(x="",y="",title="Top 20 drivers by n° of constructors they raced for")+
  coord_flip()+
  scale_fill_distiller(palette="PuRd",direction = 1,limits=c(5,14))

data = constr_degrees  %>% arrange(desc(degree))

y = ggplot(data=data[1:20,],aes(x= reorder(name,degree),y=degree)) +
  geom_bar(aes(fill=degree),color="black",size=0.35,stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=9), plot.margin = margin(0.2, 0.5, 0, 0, "cm"),plot.title = element_text(size = 10,face="bold")) +
  scale_y_continuous(breaks = pretty(data$degree, n = 10)) +
  labs(x="",y="",title="Top 20 constructors by n° of drivers who raced for them")+
  coord_flip()+
  scale_fill_distiller(palette="PuRd",direction = 1,limits=c(0,100))


grid.arrange(x,y, ncol=2,widths=c(1,1))
```

# Conclusions
Through data analysis we were able to evaluate the performance of drivers and constructors on the basis of multiple metrics. Those metrics allowed us to define a more sophisticated ranking system which, based on some assumptions, allowed us to isolate some variabilty factors relating to the changes that have occurred over the decades, allowing us to perform a more fair and objective evaluation. We were also able to draw conclusions about countries, discovering which of them partecipated the most and which of these is the homeland of the best drivers. 

The proposed ranking systems are based on subjective assumptions and parameters, but in my opinion they can be considered more balanced methods than the classic ones which are based on the simple count of absolute frequencies of basic metrics.

### Further improvements
Undoubtedly, the rating systems can be improved, especially the one regards the drivers. For examples, we can consider, for each race, which driver performed *the fastest lap* and award him with some performance score. We can also evaluate the drivers with respect to the *positions gained* (position in the starting grid and final position). A very complex metric that could be included is the *consistency of lap times*. Unfortunately, these metrics require the data related to each lap of each race in the history of *F1*. These data are only partially provided by the dataset, in fact the dataset provides the data relating to all the laps of only about half of the races; this is the reason why these metrics are not considered here. Their use would have disadvantaged the drivers who participated in the races for which the values are not present. Also qualifying data could be used, but actually they are not easily obtainable from the web.

Another factor that is often a source of discussion among fans is the *car's performance factor*. Sometimes a good driver finds himself, unfortunately in non-competitive teams, thus not being able to demonstrate his skills. It must be said, however, that typically the best drivers are hired by the most winning teams, and vice versa. It would be interesting, but at the same time very complex, to try to isolate this factor.

# Some curiosities about F1
In the following chapter some brief curiosities about Formula One are reported.

## Estimation of the total km traveled in the races
The dataset gives us information on the number of races held for each season. For each of these races we know also how many drivers partecipated. By searching on the internet how many kilometers a grand prix must consist of, we can estimate the total number of kilometers traveled by the cars that participated in all Formula 1 races. This is an estimate because some drivers have only completed a portion of the race (*in fact we will apply a hypothetical factor of -10%*) due to mechanical failures or accidents. 
Another approximation was made for those years in which the number of kilometers for a grand prix was variable, in those cases the average was considered.

Let's compare the result with some known long distances.

```{r, out.width = "1440px",echo = !knit_report,fig.align='center'}
knitr::include_graphics("imgs\\distances_img.jpg")
```

This is a large number, despite the fact that we are only considering the races, excluding qualifying, free practice and seasonal tests.

## Formula One and Blockchain
[F1 Delta Time](https://www.f1deltatime.com/) is the official *F1* blockchain game. *F1 Delta Time* creates a new paradigm for digital ownership and gaming. Through blockchain, official Formula 1 non-fungible collectible tokens allow players to participate in a play-to-earn gaming ecosystem, where skills are rewarded with real value rewards. All of the core gameplay assets in F1 Delta Time can be wholly owned, traded and sold by players and also used to play the game itself, empowering players like never before.

*You can learn more about F1 Delta Time [here](https://f1deltatime.medium.com/f1-delta-time-grand-prix-mode-phase-1-release-bca56fbc140d).*



