---
title: "ProgettoDS"
author: "Andrea Mansi"
date: "29/1/2021"
output: html_document
---

```{r setup, include=TRUE, echo=FALSE}
# IMPORTANTE: attenzione, molti "blocchi" di codice dipendono da quelli precedenti e sovrascrivono alcuni dati, quindi è fondamentale eseguire il codice in successione, dall'inizio alla fine (Restart R and run all chunks)

knitr::opts_chunk$set(echo = TRUE)

# Se true -> knitting della relazione, un sacco di porzioni NON vanno incluse
# Se false -> knitting completo, non esclude codice etc., viene incluso quasi tutto
knit_relazione = TRUE

# per includere una porzione nella relazione: INCLUDE=TRUE
```


```{r, include = !knit_relazione, warning=FALSE,message=FALSE}
# Loading libraries

library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(fmsb)
library(viridis)
```

```{r, include = !knit_relazione,message=FALSE,warning=FALSE}
# Loading csvs data

# NB: errore in riga 4376 dataset driverStand: corretto manualmente
# NB: errore in riga 23765 dataset results: corretto manualmente

circuits <- as_tibble(read_csv("data\\circuits.csv"))
constrRes <- as_tibble(read_csv("data\\constructorResults.csv"))
constr <- as_tibble(read_csv("data\\constructors.csv"))
constrStand <- as_tibble(read_csv("data\\constructorStandings.csv"))
drivers <- as_tibble(read_csv("data\\drivers.csv"))
driverStand <- as_tibble(read_csv("data\\driverStandings.csv"))
lapTimes <- as_tibble(read_csv("data\\lapTimes.csv"))
pits <- as_tibble(read_csv("data\\pitStops.csv"))
quali <- as_tibble(read_csv("data\\qualifying.csv"))
races <- as_tibble(read_csv("data\\races.csv"))
results <- as_tibble(read_csv("data\\results.csv"))
seasons <- as_tibble(read_csv("data\\seasons.csv"))
status <- as_tibble(read_csv("data\\status.csv"))

```


```{r,include = !knit_relazione, warning=FALSE,message=FALSE}

# Interrogo i dati per l'estrapolazione di alcune informazioni relative alle nazioni

# --- Pulisco i dataset dalle variabili inutili
circuits = select(circuits,-c(lat,lng,alt,url))
races = select(races,-c(time,url))

# --- Numero totale di circuiti in F1
n_of_circuits = nrow(circuits)

# --- Voglio contare il numero di gare disputate per ciascun circuito
counts <- races %>% count(circuitId) # coppie circuitID - n°gare disputate
circuits <- inner_join(circuits,counts)
circuits <- rename(circuits, held_races=n)
rm(counts)

# --- Voglio contare il numero di gare disputate per ciascuna nazione e il numero di circuiti usati per ciascuna nazione
country_stats <- circuits %>% count(country) %>% rename(circuits_used = n)
counts <- inner_join(circuits,races,by="circuitId") %>% count(country)
country_stats <- inner_join(country_stats,counts,by="country")
country_stats <- rename(country_stats,held_races=n)
rm(counts)


country_stats
```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}

# Interrogo i dati per estrapolare alcune informazioni relative ai piloti (per nazione)

# --- Pulisco il dataset dei piloti
drivers = select(drivers,-c(url))

# --- Voglio sapere quanti piloti ci sono stati per ciascuna nazione (escludo quei pochissimi piloti half nation half another nation)
# PROBLEMA -> la nazionalità nei piloti NON è espressa con il nome della nazione... non c'è scritto "Italy" ma "Italian"..... problema per il join....

# Uso un dataset custom creato ad hoc per l'associazione nazionalità - nazione :(
nat_to_country <- as_tibble(read_csv("data\\nat_to_country_custom_v1.csv"))

# --- conto il numero di piloti per nazionalità
nationalities_stats <- drivers %>% count(nationality) %>% rename(drivers=n)
# associo n° piloti alla nazione eseguendo un join per associare nazionalità e nazione
temp <- inner_join(nat_to_country,nationalities_stats,by="nationality")

# rimuovo colonna nationality in quanto non più utile
country_stats <- full_join(temp,country_stats,by="country") %>% select (-c(nationality))

# cleaning data
rm(nationalities_stats,temp)
# Gli NA diventano 0
country_stats[is.na(country_stats)] <- 0

country_stats
```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}

# Interrogo i dati per il calcolo di statistiche sui piloti

# a ciascun pilota associo la nazione e rimuovo la nazionalità
driver_stats <- drivers %>% select(c(driverId,forename,surname,nationality,driverRef))
driver_stats <- inner_join(driver_stats,nat_to_country) %>% select(-c(nationality))

# n° gare disputate per pilota
held_races <- results %>% count(driverId) %>% rename(races=n)

# n° vittorie per pilota
wins <- results %>% filter(position==1) %>% count(driverId) %>% rename(wins=n)

# n° 2° posto per pilota
second <- results %>% filter(position==2) %>% count(driverId) %>% rename(second=n)

# n° 3° posto per pilota
third <- results %>% filter(position==3) %>% count(driverId) %>% rename(third=n)

# aggiungo i relativi ai podidati alla tabella iniziale, sostituendo NA con 0
stats <- full_join(held_races,wins,by="driverId")
stats <- full_join(stats,second,by="driverId")
stats <- full_join(stats,third,by="driverId")
stats[is.na(stats)] <- 0 # sostituisco NA con 0
driver_stats <- inner_join(driver_stats,stats)
rm(stats,wins,second,third) # cancello dataset temporaneai

# Calcolo totale podi
driver_stats = driver_stats %>% mutate(podiums=wins+second+third)

# Calcolo totale podium rate
driver_stats = driver_stats %>% mutate(podium_rate=podiums/races)

# Calcolo win rate
driver_stats = driver_stats %>% mutate(win_rate=wins/races)

# calcolo del full_name e rimuovo surname e name
driver_stats = driver_stats %>% mutate(full_name = paste(forename,surname)) %>% select(-surname,-forename)

driver_stats
```

```{r,include = TRUE, warning=FALSE,message=FALSE, echo=FALSE,fig.width=10, fig.height=6}

# Plot delle informazioni ricevute per i piloti (top 30)


# races held
driver_stats = driver_stats %>% arrange(desc(races))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-races),y=races)) +
  geom_bar(aes(fill=races),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di gare disputate")

# wins plot

driver_stats = driver_stats %>% arrange(desc(wins))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-wins),y=wins)) +
  geom_bar(aes(fill=wins),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° vittorie")


# 2nd place plot

driver_stats = driver_stats %>% arrange(desc(second))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-second),y=second)) +
  geom_bar(aes(fill=second),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per 2° posto")


# 3nd place plot

driver_stats = driver_stats %>% arrange(desc(third))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-third),y=third)) +
  geom_bar(aes(fill=third),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per 3° posto")

# totale podi plot
driver_stats = driver_stats %>% arrange(desc(podiums))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-podiums),y=podiums)) +
  geom_bar(aes(fill=podiums),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di podi totali")

# per il plot del podium_rate considero i piloti con almeno 100 gare, altrimenti in cima alla classifica avrei piloti con 1 gara vinta su 1 (ad esempio)... troppo facile :)
driver_stats_with_100_races = driver_stats %>% filter(races>99)

# podium rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(podium_rate))
driver_stats_with_100_races

ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-podium_rate),y=podium_rate)) +
  geom_bar(aes(fill=podium_rate),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per rapporto podi/gare disputate (con almeno 100 gare disputate)")

# win rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(win_rate))
driver_stats_with_100_races

ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-win_rate),y=win_rate)) +
  geom_bar(aes(fill=win_rate),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per rapporto vittorie/gare disputate (con almeno 100 gare disputate)")

rm(driver_stats_with_100_races)

```


```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# Analisi del punteggio totalizzato dai piloti

# ottengo solo le informazioni utili: tutti i risultati di posizione <= 10 (dove si totalizzano punti)
results$position = as.numeric(results$position)
points = results %>% filter(position<11.0 && position >0) %>% select(driverId,points,raceId,position)

points_stats = aggregate(points$points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_points=x)

# PROBLEMA: CAMPIONATI DIVERSI -> DIVERSI SISTEMI DI PUNTI
# I DATI VANNO NORMALIZZATI PER ESSERE FAIR CON TUTTI I PILOTI DI DIVERSE EPOCHE

# Primo passo: punti per vittoria per ciascun anno (season)
races_year = races %>% select(raceId,year)
points = inner_join(points,races_year,by="raceId")
season_rank_system_data = points %>% filter(position==1) %>% select(year,points)
season_rank_system_data = unique(season_rank_system_data) %>% arrange(desc(year))

# NB: le prime 3 colonne fanno riferimento a 3 casi particolari, CHE VANNO RIMOSSI
# 2014,50 -> introduzione dei punti X2 rimossi subito
# 2019,2020 -> 26 punti (1 bonus extra per fastest lap, verrà analizzato dopo...) rimuovo

season_rank_system_data = season_rank_system_data %>% filter(points!= 50) %>% filter(points!= 26)

# rename colonna points
season_rank_system_data = season_rank_system_data %>% rename(points_per_win=points) %>% group_by(year) %>% top_n(1,points_per_win) #top_n -> tiene il max per ciascun anno

```

```{r,include = TRUE, warning=FALSE,message=FALSE, echo=FALSE,fig.width=10, fig.height=6}

ggplot(data=season_rank_system_data[],aes(x= reorder(year,year),y=points_per_win)) +
  geom_bar(position = "dodge", aes(fill=points_per_win),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1,size=9)) +
  labs(x="",y="",title="Punti per vittoria - diversi sistemi di punteggio")

```

```{r,include = TRUE, warning=FALSE,message=FALSE, echo=FALSE}

# NORMALIZZAZIONE dei dati relativi ai punteggi. Idea: assegnare a ciascun risultato dal 1950 al 2020 i punti del sistema 2020, così da premiare ciascuna posizione
# con lo stesso numero di punti

# funzione posizione -> punti
calculate_points <- function(position){
  if(is.na(position)){return(0)}
  position = as.numeric(position)
  if(position==1){return(25)}
  else if(position==2){return(18)}
  else if(position==3){return(15)}
  else if(position==4){return(12)}
  else if(position==5){return(10)}
  else if(position==6){return(8)}
  else if(position==7){return(6)}
  else if(position==8){return(4)}
  else if(position==9){return(2)}
  else if(position==10){return(1)}
  return(0)
}

# applico la funzione di conversione dei punti
points$updated_points = lapply(points$position,calculate_points)
points$updated_points = as.numeric(points$updated_points)

# somma dei punti totali (nuovo sistema) per ciascun driver
points_stats_new = aggregate(points$updated_points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_points_new=x)

# aggiungo la colonna a points stats
points_stats = inner_join(points_stats,points_stats_new,by="driverId")
# aggiungo i punteggi a driver stats 
driver_stats = inner_join(driver_stats,points_stats,by="driverId")

# elimino le statistiche dei punti, ormai aggiunge nella tabella driverstats
rm(points_stats_new)
rm(points_stats)
```

```{r,include = TRUE, warning=FALSE,message=FALSE, echo=FALSE,fig.width=10, fig.height=6}
driver_stats = driver_stats %>% arrange(desc(tot_points))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_points),y=tot_points)) +
  geom_bar(aes(fill=tot_points),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per punti totali")

driver_stats = driver_stats %>% arrange(desc(tot_points_new))
driver_stats

ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_points_new),y=tot_points_new)) +
  geom_bar(aes(fill=tot_points_new),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per punti totali - stesso sitema di punteggio per ogni stagione")
```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE,fig.width=10, fig.height=6}

# Calcolo dei potenziali punti massimi raggiungibili nella carriera di un pilota
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
# Calcolo rapporto punti_totali potenziale_punti
driver_stats = driver_stats %>% mutate(points_ratio = tot_points_new/tot_points_potential)

# Ai fini del plotting, filtro i piloti che abbiano almeno 25 gare disputate
data = driver_stats %>% filter(races > 25)
data = data %>% arrange(desc(points_ratio))
data

ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
  geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="% di punti ottenuti sul potenziale totale")
```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# Analisi dei costruttori

# pulizia dataset + conversione da nazionalità a nazione
constr = constr %>% select (-url)
constr = left_join(constr,nat_to_country) %>% select(-nationality)

# --- Conto il numero di scuderie per nazione
temp <- constr %>% count(country) %>% rename(constructors=n)
# Aggiungo l'informazione alle statistiche delle nazioni
country_stats <- left_join(country_stats,temp,by="country")
# cleaning data
rm(temp)
# Gli NA diventano 0
country_stats[is.na(country_stats)] <- 0

# --- Conto il numero di campionati vinti per scuderia (introdotti nel 1958)
seasons_constr_winners = inner_join(constrStand,races,by='raceId') %>% select(year,position,points,constructorId,raceId) %>% filter(position==1) %>% group_by(year) %>% top_n(1,points) %>% arrange(desc(year)) %>% group_by(year) %>% top_n(1,raceId) %>% select(year,constructorId)

# count per constr
seasons_constr_winners = seasons_constr_winners %>% group_by(constructorId) %>% count(constructorId) %>% rename(win_seasons=n)

# --- Conto il numero di campionati svolti per scuderia (introdotti nel 1958)
seasons_constr_count = unique(inner_join(results,races,by='raceId') %>% select(year,constructorId)) %>% count(constructorId) %>% rename(held_seasons=n) %>% arrange(desc(held_seasons))

# Riunisco i risultati in un unico df
constr_stats = full_join(constr,seasons_constr_count,by="constructorId")
constr_stats = full_join(constr_stats,seasons_constr_winners,by="constructorId")

# NA = 0
constr_stats[is.na(constr_stats)] <- 0
constr_stats

# --- Calcolo win ratio (seasons)
constr_stats = constr_stats %>% mutate(seasons_win_ratio=win_seasons/held_seasons)

# Pulizia env
rm(constr,seasons_constr_winners,seasons_constr_count)

```

```{r,include = TRUE, warning=FALSE,message=FALSE,fig.width=10, fig.height=6}

constr_stats = constr_stats %>% arrange(desc(held_seasons))
constr_stats

ggplot(data=constr_stats[1:30,],aes(x= reorder(name,-held_seasons),y=held_seasons)) +
  geom_bar(aes(fill=held_seasons),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 scuderie per numero di campionati svolti")


data = constr_stats %>% arrange(desc(win_seasons)) %>% filter(win_seasons>0)
data

ggplot(data=data,aes(x= reorder(name,-win_seasons),y=win_seasons)) +
  geom_bar(aes(fill=win_seasons),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Classifica scuderie per campionati vinti")


constr_stats = constr_stats %>% arrange(desc(seasons_win_ratio))
constr_stats

ggplot(data=data,aes(x= reorder(name,-seasons_win_ratio),y=seasons_win_ratio)) +
  geom_bar(aes(fill=seasons_win_ratio),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Rapporto campionati vinti/campionati svolti")

```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# Test circular barplot con statistiche scuderie (costruttori)

constr_stats = constr_stats %>% arrange(desc(held_seasons))
constr_stats

ggplot(data=constr_stats[1:30,],aes(x= reorder(name,-held_seasons),y=held_seasons)) +
  geom_bar(aes(fill=held_seasons),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1)) +
  labs(x="",y="",title="Top 30 scuderie per numero di campionati svolti") +
  coord_polar() + ylim(-50,75)

```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# --- Calcolo numero pole position piloti e relativo rateo + plot delle due statistiche
# NB: un pilota (ha avuto la pole position) parte primo se al giro 1 parte in pos 1

pole <- results %>% filter(grid==1) %>% select(driverId,grid) %>% count(driverId) %>% rename(pole_positions=n)

# Aggiungo le statistiche relative alle pole_position ai piloti
driver_stats = full_join(driver_stats,pole)
driver_stats[is.na(driver_stats)] <- 0

# pole ratio, calcolo
driver_stats = driver_stats %>% mutate(pole_ratio=pole_positions/races)

# pole number plot
driver_stats = driver_stats %>% arrange(desc(pole_positions))
driver_stats
```

```{r,include = TRUE, warning=FALSE,message=FALSE}
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-pole_positions),y=pole_positions)) +
  geom_bar(aes(fill=pole_positions),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di pole positions")

# pole ratio plot
data = driver_stats %>% arrange(desc(pole_ratio)) %>% filter(races>25)
data 

ggplot(data=data[1:30,],aes(x= reorder(full_name,-pole_ratio),y=pole_ratio)) +
  geom_bar(aes(fill=pole_ratio),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5), plot.margin = margin(0.2, 0.5, 0, 0.6, "cm")) +
  labs(x="",y="",title="Top 30 piloti per n° di pole positions (con almeno 25 gare)")


```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# Test spidercharts con le stats dei driver

max_races =          max(driver_stats$races)
max_wins  =          max(driver_stats$wins)
max_podiums =        max(driver_stats$podiums)
max_tot_points_new = max(driver_stats$tot_points_new)
max_poles=           max(driver_stats$pole_positions)
max_podium_rate=     max(driver_stats$podium_rate)
max_win_rate=        max(driver_stats$win_rate)
max_points_ratio=    max(driver_stats$points_ratio)
max_pole_ratio=      max(driver_stats$pole_ratio)


maxs = list(max_races,max_wins,max_podiums,max_tot_points_new,max_poles,1,1,1,1)
mins = list(0,0,0,0,0,0,0,0,0)

n_drivers = 6 # numero di piloti per cui plottare i grafici
driver_stats = driver_stats %>% arrange(desc(tot_points_new)) # ordino in base al criterio che considero migliore (per il ranking 1°,2°,3° etc)
```

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=10, fig.height=6}
layout.matrix = matrix(c(1,4,2,5,3,6), nrow=2,ncol=3)
layout(mat = layout.matrix, heights = c(1,1), widths = c(2,2,2))
c <- par(mar=c(1,0,2,0),oma=c(0,0,0,0))


for(i in 1:n_drivers){
  
test_data = driver_stats[i,] %>% select(races,wins,podiums,tot_points_new,pole_positions,podium_rate,win_rate,points_ratio,pole_ratio)
name = driver_stats$full_name[i]

data = rbind(maxs,mins,test_data)

colnames(data) <- c("Gare disputate","Vittorie","Podi \n","Totale punti","Totale pole","Rateo podi","Rateo vittorie","Rateo punti \n","Rateo pole")

radarchart(data, axistype=0, 
           
    #polygon
    pcol=rgb(0/255,0/255,0/255,0.9) , pfcol=rgb(255/255,0/255,0/255,0.4) , plwd=3,
    
    #grid
    cglcol="grey", cglty=3, axislabcol="grey", cglwd=1,
 
    #labels
    vlcex=0.9,
    title=paste(name," (",toString(i),"°)",sep="")
    )
}
#reset dei par
par(c)
```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
```


```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=10, fig.height=6}

# Plot top nazionalità per num piloti

country_stats = country_stats %>% arrange(desc(drivers))

ggplot(data=country_stats[1:20,],aes(x= reorder(country,-drivers),y=drivers)) +
  geom_bar(aes(fill=drivers),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 20 nazioni per n° di piloti")

# Plot top nazionalità per gare disputate

country_stats = country_stats %>% arrange(desc(held_races))

ggplot(data=country_stats[1:20,],aes(x= reorder(country,-held_races),y=held_races)) +
  geom_bar(aes(fill=held_races),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 20 nazioni per n° di gare disputate")

# Plot top nazionalità per num circuiti

country_stats = country_stats %>% arrange(desc(circuits_used))

ggplot(data=country_stats[1:20,],aes(x= reorder(country,-circuits_used),y=circuits_used)) +
  geom_bar(aes(fill=circuits_used),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 20 nazioni per n° circuiti utilizzati")
```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# --- Aggiorno le statistiche sulle nazioni

# gare svolte da piloti, per nazionalità
held_races_per_country = driver_stats %>% select(country,races)
held_races_per_country = aggregate(held_races_per_country$races,by=list(country=held_races_per_country$country),FUN=sum) %>% rename(held_races_by_drivers=x)

# campionati svolti dai costruttori, per nazionalità
held_seasons_per_constr = aggregate(constr_stats$held_seasons,by=list(country=constr_stats$country),FUN=sum) %>% rename(held_seasons_by_constr=x)

# merge dei dati
country_stats = full_join(country_stats,held_races_per_country,by="country")
country_stats = full_join(country_stats,held_seasons_per_constr,by="country")

country_stats[is.na(country_stats)] <- 0 # NA to zeros

rm(constr_per_country,held_races_per_country,held_seasons_per_constr) # data clean

country_stats
```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# Calcolo di un punteggio per le nazioni ("nazione più significativa/presente nella F1 negli ultimi 70 anni")

# Pesi delle varie statistiche (la somma deve dare 1.0)
weight_drivers = 0.1;
weight_constr = 0.1;
weight_held_races = 0.3;
weight_circuits_used = 0.0;
weight_held_races_by_drivers = 0.25;
weight_held_seasons_by_constr = 0.25;

tot_drivers = sum(country_stats$drivers,na.rm = TRUE)
tot_constr = sum(country_stats$constructors,na.rm = TRUE)
tot_held_races = sum(country_stats$held_races,na.rm = TRUE)
tot_circuits_used = sum(country_stats$circuits_used,na.rm = TRUE)
tot_held_races_by_drivers = sum(country_stats$held_races_by_drivers,na.rm = TRUE)
tot_held_seasons_by_constr = sum(country_stats$held_seasons_by_constr,na.rm = TRUE)

score_multiplier=1000

country_stats <- country_stats %>% mutate(score= score_multiplier*(
                                                 (drivers/tot_drivers)*weight_drivers +
                                                 (constructors/tot_constr)*weight_constr +
                                                 (held_races/tot_held_races)*weight_held_races + 
                                                 (circuits_used/tot_circuits_used)*weight_circuits_used +
                                                 (held_races_by_drivers/tot_held_races_by_drivers)*weight_held_races_by_drivers +
                                                 (held_seasons_by_constr/tot_held_seasons_by_constr)*weight_held_seasons_by_constr))

1 == weight_drivers + weight_constr +weight_held_races +weight_circuits_used +weight_held_races_by_drivers +weight_held_seasons_by_constr
sum(country_stats$score,na.rm=TRUE) == score_multiplier
```


```{r,include = TRUE, warning=FALSE,message=FALSE,echo=FALSE,fig.width=10, fig.height=6}
# Plot top 25 nazioni per score

country_stats = country_stats %>% arrange(desc(score))
country_stats

ggplot(data=country_stats[0:25,],aes(x= reorder(country,-score),y=score)) +
  geom_bar(aes(fill=score),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=52.5, vjust=1, hjust=1,size=10.5)) +
  labs(x="",y="",title="Top 25 nazioni più presenti nella storia della F1")

ggplot(data=country_stats[0:25,],aes(x= reorder(country,score),y=score)) +
  geom_bar(aes(fill=score),stat = 'identity', show.legend = FALSE) +
  theme(axis.text.x = element_text(angle=0, vjust=1, hjust=1),axis.text.y = element_text(size=10.5)) +
  labs(x="",y="",title="test horizontal barplot") +
  coord_flip()

```

```{r,include = !knit_relazione, warning=FALSE,message=FALSE}
# Test spidercharts con le stats dei driver

max_drivers                = max(country_stats$drivers)
max_constr                 = max(country_stats$constructors)
max_held_races             = max(country_stats$held_races)
max_circuits_used          = max(country_stats$circuits_used)
max_held_races_by_drivers  = max(country_stats$held_races_by_drivers)
max_held_seasons_by_constr = max(country_stats$held_seasons_by_constr)


maxs = list(max_drivers,max_constr,max_held_races,max_circuits_used,max_held_races_by_drivers,max_held_seasons_by_constr)
mins = list(0,0,0,0,0,0)

n_country = 6 # numero di nazioni per cui plottare i grafici
country_stats = country_stats %>% arrange(desc(score)) # ordino in base al criterio che considero migliore (per il ranking 1°,2°,3° etc)
```

```{r,include = TRUE, warning=FALSE,echo=FALSE,message=FALSE,fig.width=10, fig.height=6}

layout.matrix = matrix(c(1,4,2,5,3,6), nrow=2,ncol=3)
layout(mat = layout.matrix, heights = c(1,1), widths = c(2,2,2))
c <- par(mar=c(1,0,2,0),oma=c(0,0,0,0))


for(i in 1:n_drivers){
  
test_data = country_stats[i,] %>% select(drivers,constructors,held_races,circuits_used,held_races_by_drivers,held_seasons_by_constr)
name = country_stats$country[i]

data = rbind(maxs,mins,test_data)

colnames(data) <- c("Piloti","Costruttori \n","\n\n Gare disputate \n su circuiti","Circuiti","\n\n Gare disputate \n da piloti","Stagioni svolte \n da costruttori \n\n")

radarchart(data, axistype=0,
           
    #polygon
    pcol=rgb(0/255,0/255,0/255,0.9) , pfcol=rgb(0/255,200/255,0/255,0.4) , plwd=3,
    
    #grid
    cglcol="grey", cglty=3, axislabcol="grey", cglwd=1,
 
    #labels
    vlcex=0.9,
    title=paste(name," (",toString(i),"°)",sep="")
    )
}
#reset dei par
par(c)
```