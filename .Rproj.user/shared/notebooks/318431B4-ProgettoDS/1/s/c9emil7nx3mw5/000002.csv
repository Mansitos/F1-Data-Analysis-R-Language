"0","# Some constructors metrics"
"0",""
"0","# races won by constructors"
"0","wins = results %>% select(raceId,constructorId,position) %>% filter(position==1) %>% count(constructorId) %>% rename(races_won=n)"
"0","constr_stats = full_join(constr_stats,wins,by=""constructorId"")"
"0","constr_stats[is.na(constr_stats)] <- 0"
"0",""
"0","second = results %>% select(raceId,constructorId,position) %>% filter(position==2) %>% count(constructorId) %>% rename(second=n)"
"0","constr_stats = full_join(constr_stats,second,by=""constructorId"")"
"0","constr_stats[is.na(constr_stats)] <- 0"
"0",""
"0","third = results %>% select(raceId,constructorId,position) %>% filter(position==3) %>% count(constructorId) %>% rename(third=n)"
"0","constr_stats = full_join(constr_stats,third,by=""constructorId"")"
"0","constr_stats[is.na(constr_stats)] <- 0"
"0",""
"0","held_races = results %>% select(raceId,constructorId) %>% count(constructorId) %>% rename(held_races=n)"
"0","constr_stats = full_join(constr_stats,held_races,by=""constructorId"")"
"0","constr_stats[is.na(constr_stats)] <- 0"
"0",""
"0","pole = results %>% filter(grid==1) %>% select(constructorId,grid) %>% count(constructorId) %>% rename(pole_positions=n)"
"0","constr_stats = full_join(constr_stats,pole,by=""constructorId"")"
"0","constr_stats[is.na(constr_stats)] <- 0"
"0",""
"0","constr_stats = constr_stats %>% mutate(podiums=races_won+second+third) %>% mutate(podium_rate=podiums/held_races) %>% mutate(win_rate=races_won/held_races) %>% mutate(pole_rate=pole_positions/held_races)"
"0",""
"0","# points statistics"
"0",""
"0","# ottengo solo le informazioni utili: tutti i risultati di posizione <= 10 (dove si totalizzano punti)"
"0","results$position = as.numeric(results$position)"
"0","points = results %>% filter(position<11.0 && position >0) %>% select(constructorId,points,raceId,position)"
"0",""
"0","points_stats = aggregate(points$points,by=list(constructorId=points$constructorId),FUN=sum) %>% rename(tot_points=x)"
"0",""
"0","# applico la funzione di conversione dei punti"
"0","points$updated_points = lapply(points$position,calculate_points)"
"0","points$updated_points = as.numeric(points$updated_points)"
"0",""
"0","# somma dei punti totali (nuovo sistema) per ciascun driver"
"0","points_stats_new = aggregate(points$updated_points,by=list(constructorId=points$constructorId),FUN=sum) %>% rename(tot_points_new=x)"
"0",""
"0","# Aggiungo i dati"
"0",""
"0","constr_stats = full_join(constr_stats,points_stats,by=""constructorId"")"
"0","constr_stats = full_join(constr_stats,points_stats_new,by=""constructorId"")"
"0","constr_stats[is.na(constr_stats)] <- 0"
"0",""
"0","constr_stats = constr_stats %>% mutate(points_potential=held_races*25) %>% mutate(points_rate_new=(tot_points_new/points_potential))"
"0",""
"0",""
"0","# performance computation"
"0","constr_stats = constr_stats %>% mutate(performance=0.25*win_rate+0.25*podium_rate+0.25*points_rate_new+0.25*pole_rate)"
"0",""
