tot_circuits_used = sum(country_stats$circuits_used,na.rm = TRUE)
mult=1000
country_stats <- country_stats %>% mutate(score= mult*(
(drivers/tot_drivers)*weight_drivers +
(held_races/tot_held_races)*weight_held_races +
(circuits_used/tot_circuits_used)*weight_circuits_used))
sum(country_stats$score,na.rm=TRUE)/mult # MUST BE 1 (100%)
# Plot nation score
country_stats = country_stats %>% arrange(desc(score))
country_stats
ggplot(data=country_stats[1:20,],aes(x= reorder(country,-score),y=score)) +
geom_bar(aes(fill=score),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Ranking nazioni F1")
# Calcolo statistiche piloti
driver_stats <- drivers %>% select(c(driverId,forename,surname,nationality,driverRef))
driver_stats <- inner_join(driver_stats,nat_to_country) %>% select(-c(nationality))
# n° gare disputate per pilota
held_races <- results %>% count(driverId) %>% rename(races=n)
# n° vittorie per pilota
wins <- results %>% filter(position==1) %>% count(driverId) %>% rename(wins=n)
# n° 2° posto per pilota
second <- results %>% filter(position==2) %>% count(driverId) %>% rename(second=n)
# n° 3° posto per pilota
third <- results %>% filter(position==3) %>% count(driverId) %>% rename(third=n)
# aggiungo i dati alla tabella iniziale, sostituendo NA con 0
stats <- full_join(held_races,wins,by="driverId")
stats <- full_join(stats,second,by="driverId")
stats <- full_join(stats,third,by="driverId")
stats[is.na(stats)] <- 0
driver_stats <- inner_join(driver_stats,stats)
rm(stats,wins,second,third) # cancello dataset temporaneai
driver_stats
# Calcolo totale podi
driver_stats = driver_stats %>% mutate(podiums=wins+second+third)
# Calcolo totale podium rate
driver_stats = driver_stats %>% mutate(podium_rate=podiums/races)
# Calcolo win rate
driver_stats = driver_stats %>% mutate(win_rate=wins/races)
driver_stats
# Plotting driver for....
# races held
driver_stats = driver_stats %>% mutate(full_name = paste(forename,surname))
driver_stats = driver_stats %>% arrange(desc(races))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-races),y=races)) +
geom_bar(aes(fill=races),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="races")
# wins
driver_stats = driver_stats %>% arrange(desc(wins))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-wins),y=wins)) +
geom_bar(aes(fill=wins),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="wins")
# 2nd place
driver_stats = driver_stats %>% arrange(desc(second))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-second),y=second)) +
geom_bar(aes(fill=second),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="2nd")
# 3nd place
driver_stats = driver_stats %>% arrange(desc(third))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-third),y=third)) +
geom_bar(aes(fill=third),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="3rd")
# totale podi
driver_stats = driver_stats %>% arrange(desc(podiums))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-podiums),y=podiums)) +
geom_bar(aes(fill=podiums),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Tot drivers for n° of podiums")
# sub-set of the dataset with at least 100 races held (o piloti con rate 2 gare vinte su 2..... facile così :) )
driver_stats_with_100_races = driver_stats %>% filter(races>99)
# podium rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(podium_rate))
driver_stats_with_100_races
ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-podium_rate),y=podium_rate)) +
geom_bar(aes(fill=podium_rate),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Podium rate for drivers with at least 100 races")
# win rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(win_rate))
driver_stats_with_100_races
ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-win_rate),y=win_rate)) +
geom_bar(aes(fill=win_rate),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Win rate for drivers with at least 100 races")
rm(driver_stats_with_100_races)
# Driver points analysis
results$position = as.numeric(results$position)
points = results %>% filter(position<11.0 && position >0) %>% select(driverId,points,raceId,position)
# there are \n... remove? ....
points_stats = aggregate(points$points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_poits=x)
# PROBLEM: DIFFERENT SEASON -> DIFFERNT POINTS SYSTEM... DATA SHOULD BE NORMALIZED.
#first step, points per win for every season
races_year = races %>% select(raceId,year)
points = inner_join(points,races_year,by="raceId")
season_rank_system_data = points %>% filter(position==1) %>% select(year,points)
season_rank_system_data = unique(season_rank_system_data) %>% arrange(desc(year))
# NB: le prime 3 colonne fanno riferimento a 3 casi particolari, CHE VANNO RIMOSSI
# 2014,50 -> introduzione dei punti X2 rimossi subito
# 2019,2020 -> 26 punti (1 bonus extra per fastest lap, verrà analizzato dopo...) rimuovo
season_rank_system_data = season_rank_system_data %>% filter(points!= 50) %>% filter(points!= 26)
# rename colonna points
season_rank_system_data = season_rank_system_data %>% rename(points_per_win=points)
ggplot(data=season_rank_system_data[],aes(x= reorder(year,year),y=points_per_win)) +
geom_bar(aes(fill=points_per_win),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=0, vjust=0, hjust=1)) +
labs(x="",y="",title="Points per win for different seasons")
# Let's now assign points with the LAST scoring system to all races :)
calculate_points <- function(position){
if(is.na(position)){return(0)}
position = as.numeric(position)
if(position==1){return(25)}
else if(position==2){return(18)}
else if(position==3){return(15)}
else if(position==4){return(12)}
else if(position==5){return(10)}
else if(position==6){return(8)}
else if(position==7){return(6)}
else if(position==8){return(4)}
else if(position==9){return(2)}
else if(position==10){return(1)}
return(0)
}
points$updated_points = lapply(points$position,calculate_points)
points$updated_points = as.numeric(points$updated_points)
points_stats_new = aggregate(points$updated_points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_poits_new=x)
points_stats = inner_join(points_stats,points_stats_new,by="driverId")
driver_stats = inner_join(driver_stats,points_stats,by="driverId")
rm(points_stats_new)
rm(points_stats)
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits),y=tot_poits)) +
geom_bar(aes(fill=tot_poits),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="tot points rank")
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits_new),y=tot_poits_new)) +
geom_bar(aes(fill=tot_poits_new),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="tot points rank with normalized data (same score system for each season)")
driver_stats = driver_stats %>% mutate(tot_points_potential = held_races*25)
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_points_new/tot_points_potential)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=tot_points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
knitr::opts_chunk$set(echo = TRUE)
# Se true -> knitting della relazione, un sacco di porzioni NON vanno incluse
knit_relazione = FALSE
# Loading libraries
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
# Loading csvs data
# NB: in alcuni csv l'intestazionea aveva una , di troppo, ricordarselo nel caso di utilizzo del dataset aggiornato 2020+
# NB: errore in riga 4376 dataset driverStand: corretto manualmente
# NB: errore in riga 23765 dataset results: corretto manualmente
circuits <- as_tibble(read_csv("data\\circuits.csv"))
constrRes <- as_tibble(read_csv("data\\constructorResults.csv"))
constr <- as_tibble(read_csv("data\\constructors.csv"))
constrStand <- as_tibble(read_csv("data\\constructorStandings.csv"))
drivers <- as_tibble(read_csv("data\\drivers.csv"))
driverStand <- as_tibble(read_csv("data\\driverStandings.csv"))
lapTimes <- as_tibble(read_csv("data\\lapTimes.csv"))
pits <- as_tibble(read_csv("data\\pitStops.csv"))
quali <- as_tibble(read_csv("data\\qualifying.csv"))
races <- as_tibble(read_csv("data\\races.csv"))
results <- as_tibble(read_csv("data\\results.csv"))
seasons <- as_tibble(read_csv("data\\seasons.csv"))
status <- as_tibble(read_csv("data\\status.csv"))
# --- Pulisco i dataset dalle variabili inutili
circuits = select(circuits,-c(lat,lng,alt,url))
races = select(races,-c(time,url))
# --- Numero totale di circuiti in F1
n_of_circuits = nrow(circuits)
# --- Voglio contare il numero di gare disputate per ciascun circuito
counts <- races %>% count(circuitId) # coppie circuitID - n°gare disputate
circuits <- inner_join(circuits,counts)
circuits <- rename(circuits, held_races=n)
# --- Voglio contare il numero di gare disputate per ciascuna nazione e il numero di circuiti usati per ciascuna nazione
country_stats <- circuits %>% count(country) %>% rename(circuits_used = n)
counts <- inner_join(circuits,races,by="circuitId") %>% count(country)
country_stats <- inner_join(country_stats,counts,by="country")
country_stats <- rename(country_stats,held_races=n)
# --- Pulisco il dataset dei piloti
drivers = select(drivers,-c(url))
# --- Voglio sapere quanti piloti ci sono stati per ciascuna nazione (escludo quei pochissimi piloti half nation half another nation)
# NB: PROBLEMONE -> la nazionalità nei piloti è espressa non con il nome della nazione... non c'è scritto "Italy" ma "Italian"..... problema per il join....
# Uso dataset custom per associazione nazionalità - nazione .......
nat_to_country <- as_tibble(read_csv("data\\nat_to_country_custom_v1.csv"))
# numero di piloti per nazionalità
nationalities_stats <- drivers %>% count(nationality) %>% rename(drivers=n)
# associo n° piloti alla nazione eseguendo un join per associare nazionalità e nazione
temp <- inner_join(nat_to_country,nationalities_stats,by="nationality")
# rimuovo nationality in quanto non più utile
country_stats <- full_join(temp,country_stats,by="country") %>% select (-c(nationality))
rm(nationalities_stats)
# cleaning data
rm(temp)
# Gli NA diventano 0
country_stats[is.na(country_stats)] <- 0
# Plot top nazionalità per num piloti
country_stats = country_stats %>% arrange(desc(drivers))
ggplot(data=country_stats[1:20,],aes(x= reorder(country,-drivers),y=drivers)) +
geom_bar(aes(fill=drivers),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Top 20 nazioni per n° di piloti")
# Plot top nazionalità per gare disputate
country_stats = country_stats %>% arrange(desc(held_races))
ggplot(data=country_stats[1:20,],aes(x= reorder(country,-held_races),y=held_races)) +
geom_bar(aes(fill=held_races),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Top 20 nazioni per n° di gare disputate")
# Plot top nazionalità per num circuiti
country_stats = country_stats %>% arrange(desc(circuits_used))
ggplot(data=country_stats[1:20,],aes(x= reorder(country,-circuits_used),y=circuits_used)) +
geom_bar(aes(fill=circuits_used),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Top 20 nazioni per n° circuiti utilizzati")
# Score calculator per le nazioni, basato su n° piloti, gare disputate, circuiti utilizzati
weight_drivers = 0.40;
weight_held_races = 0.50;
weight_circuits_used = 0.10;
tot_drivers = sum(country_stats$drivers,na.rm = TRUE)
tot_held_races = sum(country_stats$held_races,na.rm = TRUE)
tot_circuits_used = sum(country_stats$circuits_used,na.rm = TRUE)
mult=1000
country_stats <- country_stats %>% mutate(score= mult*(
(drivers/tot_drivers)*weight_drivers +
(held_races/tot_held_races)*weight_held_races +
(circuits_used/tot_circuits_used)*weight_circuits_used))
sum(country_stats$score,na.rm=TRUE)/mult # MUST BE 1 (100%)
# Plot nation score
country_stats = country_stats %>% arrange(desc(score))
country_stats
ggplot(data=country_stats[1:20,],aes(x= reorder(country,-score),y=score)) +
geom_bar(aes(fill=score),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Ranking nazioni F1")
# Calcolo statistiche piloti
driver_stats <- drivers %>% select(c(driverId,forename,surname,nationality,driverRef))
driver_stats <- inner_join(driver_stats,nat_to_country) %>% select(-c(nationality))
# n° gare disputate per pilota
held_races <- results %>% count(driverId) %>% rename(races=n)
# n° vittorie per pilota
wins <- results %>% filter(position==1) %>% count(driverId) %>% rename(wins=n)
# n° 2° posto per pilota
second <- results %>% filter(position==2) %>% count(driverId) %>% rename(second=n)
# n° 3° posto per pilota
third <- results %>% filter(position==3) %>% count(driverId) %>% rename(third=n)
# aggiungo i dati alla tabella iniziale, sostituendo NA con 0
stats <- full_join(held_races,wins,by="driverId")
stats <- full_join(stats,second,by="driverId")
stats <- full_join(stats,third,by="driverId")
stats[is.na(stats)] <- 0
driver_stats <- inner_join(driver_stats,stats)
rm(stats,wins,second,third) # cancello dataset temporaneai
driver_stats
# Calcolo totale podi
driver_stats = driver_stats %>% mutate(podiums=wins+second+third)
# Calcolo totale podium rate
driver_stats = driver_stats %>% mutate(podium_rate=podiums/races)
# Calcolo win rate
driver_stats = driver_stats %>% mutate(win_rate=wins/races)
driver_stats
# Plotting driver for....
# races held
driver_stats = driver_stats %>% mutate(full_name = paste(forename,surname))
driver_stats = driver_stats %>% arrange(desc(races))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-races),y=races)) +
geom_bar(aes(fill=races),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="races")
# wins
driver_stats = driver_stats %>% arrange(desc(wins))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-wins),y=wins)) +
geom_bar(aes(fill=wins),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="wins")
# 2nd place
driver_stats = driver_stats %>% arrange(desc(second))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-second),y=second)) +
geom_bar(aes(fill=second),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="2nd")
# 3nd place
driver_stats = driver_stats %>% arrange(desc(third))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-third),y=third)) +
geom_bar(aes(fill=third),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="3rd")
# totale podi
driver_stats = driver_stats %>% arrange(desc(podiums))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-podiums),y=podiums)) +
geom_bar(aes(fill=podiums),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Tot drivers for n° of podiums")
# sub-set of the dataset with at least 100 races held (o piloti con rate 2 gare vinte su 2..... facile così :) )
driver_stats_with_100_races = driver_stats %>% filter(races>99)
# podium rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(podium_rate))
driver_stats_with_100_races
ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-podium_rate),y=podium_rate)) +
geom_bar(aes(fill=podium_rate),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Podium rate for drivers with at least 100 races")
# win rate for drivers with at least 100 races held
driver_stats_with_100_races = driver_stats_with_100_races %>% arrange(desc(win_rate))
driver_stats_with_100_races
ggplot(data=driver_stats_with_100_races[1:30,],aes(x= reorder(full_name,-win_rate),y=win_rate)) +
geom_bar(aes(fill=win_rate),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="Win rate for drivers with at least 100 races")
rm(driver_stats_with_100_races)
# Driver points analysis
results$position = as.numeric(results$position)
points = results %>% filter(position<11.0 && position >0) %>% select(driverId,points,raceId,position)
# there are \n... remove? ....
points_stats = aggregate(points$points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_poits=x)
# PROBLEM: DIFFERENT SEASON -> DIFFERNT POINTS SYSTEM... DATA SHOULD BE NORMALIZED.
#first step, points per win for every season
races_year = races %>% select(raceId,year)
points = inner_join(points,races_year,by="raceId")
season_rank_system_data = points %>% filter(position==1) %>% select(year,points)
season_rank_system_data = unique(season_rank_system_data) %>% arrange(desc(year))
# NB: le prime 3 colonne fanno riferimento a 3 casi particolari, CHE VANNO RIMOSSI
# 2014,50 -> introduzione dei punti X2 rimossi subito
# 2019,2020 -> 26 punti (1 bonus extra per fastest lap, verrà analizzato dopo...) rimuovo
season_rank_system_data = season_rank_system_data %>% filter(points!= 50) %>% filter(points!= 26)
# rename colonna points
season_rank_system_data = season_rank_system_data %>% rename(points_per_win=points)
ggplot(data=season_rank_system_data[],aes(x= reorder(year,year),y=points_per_win)) +
geom_bar(aes(fill=points_per_win),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=0, vjust=0, hjust=1)) +
labs(x="",y="",title="Points per win for different seasons")
# Let's now assign points with the LAST scoring system to all races :)
calculate_points <- function(position){
if(is.na(position)){return(0)}
position = as.numeric(position)
if(position==1){return(25)}
else if(position==2){return(18)}
else if(position==3){return(15)}
else if(position==4){return(12)}
else if(position==5){return(10)}
else if(position==6){return(8)}
else if(position==7){return(6)}
else if(position==8){return(4)}
else if(position==9){return(2)}
else if(position==10){return(1)}
return(0)
}
points$updated_points = lapply(points$position,calculate_points)
points$updated_points = as.numeric(points$updated_points)
points_stats_new = aggregate(points$updated_points,by=list(driverId=points$driverId),FUN=sum) %>% rename(tot_poits_new=x)
points_stats = inner_join(points_stats,points_stats_new,by="driverId")
driver_stats = inner_join(driver_stats,points_stats,by="driverId")
rm(points_stats_new)
rm(points_stats)
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits),y=tot_poits)) +
geom_bar(aes(fill=tot_poits),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="tot points rank")
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits_new),y=tot_poits_new)) +
geom_bar(aes(fill=tot_poits_new),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="tot points rank with normalized data (same score system for each season)")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% arrange(desc(tot_poits))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits),y=tot_poits)) +
geom_bar(aes(fill=tot_poits),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=90, vjust=0, hjust=1)) +
labs(x="",y="",title="tot points rank")
driver_stats = driver_stats %>% arrange(desc(tot_poits_new))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits_new),y=tot_poits_new)) +
geom_bar(aes(fill=tot_poits_new),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="tot points rank with normalized data (same score system for each season)")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
driver_stats = driver_stats %>% arrange(desc(points_ratio)
driver_stats
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
driver_stats = driver_stats %>% arrange(desc(points_ratio)
driver_stats
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
driver_stats = driver_stats %>% arrange(desc(points_ratio))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
# include only drivers with at least 50 races
data = driver_stats %>% filter(races > 50)
data = data %>% arrange(desc(points_ratio))
data
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
# include only drivers with at least 50 races
data = driver_stats %>% filter(races > 50)
data = data %>% arrange(desc(points_ratio))
data
ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
# include only drivers with at least 50 races
data = driver_stats %>% filter(races > 30)
data = data %>% arrange(desc(points_ratio))
data
ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
# include only drivers with at least 50 races
data = driver_stats %>% filter(races > 25)
data = data %>% arrange(desc(points_ratio))
data
ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio*tot_poits_new),y=points_ratio*tot_poits_new)) +
geom_bar(aes(fill=points_ratio*tot_poits_new),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
# include only drivers with at least 50 races
data = driver_stats %>% filter(races > 25)
data = data %>% arrange(desc(points_ratio))
data
ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% mutate(tot_points_potential = races*25)
driver_stats = driver_stats %>% mutate(points_ratio = tot_poits_new/tot_points_potential)
# include only drivers with at least 50 races
data = driver_stats %>% filter(races > 25)
data = data %>% arrange(desc(points_ratio))
data
ggplot(data=data[1:30,],aes(x= reorder(full_name,-points_ratio),y=points_ratio)) +
geom_bar(aes(fill=points_ratio),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="% of points scored from tot. potential")
driver_stats = driver_stats %>% arrange(desc(tot_poits))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits),y=tot_poits)) +
geom_bar(aes(fill=tot_poits),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=0, hjust=1)) +
labs(x="",y="",title="tot points rank")
driver_stats = driver_stats %>% arrange(desc(tot_poits_new))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits_new),y=tot_poits_new)) +
geom_bar(aes(fill=tot_poits_new),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="tot points rank with normalized data (same score system for each season)")
driver_stats = driver_stats %>% arrange(desc(tot_poits))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits),y=tot_poits)) +
geom_bar(aes(fill=tot_poits),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="tot points rank")
driver_stats = driver_stats %>% arrange(desc(tot_poits_new))
driver_stats
ggplot(data=driver_stats[1:30,],aes(x= reorder(full_name,-tot_poits_new),y=tot_poits_new)) +
geom_bar(aes(fill=tot_poits_new),stat = 'identity', show.legend = FALSE) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(x="",y="",title="tot points rank with normalized data (same score system for each season)")
