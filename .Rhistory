arcs = as.data.frame(unique(drivers_constr_arcs))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.3)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1.5
vis.arcs$shadow <- TRUE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
library(visNetwork)
top_c = 50
top_d = 75
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.3)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1.5
vis.arcs$shadow <- TRUE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.3)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1.5
vis.arcs$shadow <- TRUE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
?visOptions
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.2)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
?visNetwork
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.2)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
allowed_constr
drivers_constr_arcs
drivers_constr_arcs
drivers_constr_arcs
drivers_constr_arcs
arcs = arcs %>% filter(from %in% nodes$id)
arcs
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.2)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
nodes
nodes
nodes
nodes = nodes %>% filter(id %in% arcs$from)
nodes
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
nodes = nodes %>% filter(id %in% list(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
nodes
list(arcs$from,arcs$to)
list(arcs$from[],arcs$to[])
arcs$from
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.2)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
arcs
arcs$from
cbind(arcs$from,arcs$to)
rbind(arcs$from,arcs$to)
append(arcs$from,arcs$to)
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.2)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.3)*40
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.5)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.4)*50
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
library(visNetwork)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.35)*60
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
# IMPORTANTE: attenzione, molti "blocchi" di codice dipendono da quelli precedenti e sovrascrivono alcuni dati, quindi è fondamentale eseguire il codice in successione, dall'inizio alla fine (Restart R and run all chunks)
knitr::opts_chunk$set(echo = TRUE)
# Se true -> knitting della relazione, un sacco di porzioni NON vanno incluse
# Se false -> knitting completo, non esclude codice etc., viene incluso quasi tutto
knit_relazione = TRUE
# if false -> gif animations render skipped
render_anim = TRUE
# per includere una porzione nella relazione: include = !knit_relazione
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.325)*65
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white",height="720px",width = "1440px")
visOptions(net,highlightNearest = TRUE)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.325)*65
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white",height="720px",width = "1440px")
visOptions(net,highlightNearest = TRUE)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.325)*65
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white",height="70%",width = "100%")
visOptions(net,highlightNearest = TRUE)
top_c = 50
top_d = 70
allowed_constr = constr_stats %>% arrange(desc(performance)) %>% filter(held_races >= 50) %>% top_n(top_c,performance)
allowed_drivers = driver_stats %>% arrange(desc(performance_with_bonus)) %>% filter(races >= 20)%>% top_n(top_d,performance_with_bonus)
constr_nodes = allowed_constr %>% select(name,performance) %>% rename(id=name) %>% mutate(group="constructor") %>% mutate(color=list(list(background="gold",border="black"))) %>% rename(size=performance)%>% mutate(shape="diamond")
drivers_nodes = allowed_drivers %>% select(full_name,performance_with_bonus) %>% rename(id=full_name) %>% mutate(group="driver") %>% mutate(color=list(list(background="tomato",border="black")))%>% rename(size=performance_with_bonus) %>% mutate(shape="dot")
id_name_drivers = allowed_drivers %>% select(full_name,driverId)
id_name_constr = allowed_constr %>% select(name,constructorId)
drivers_constr_arcs = unique(results %>% select(driverId,constructorId))
drivers_constr_arcs = inner_join(id_name_constr,drivers_constr_arcs,by="constructorId")
drivers_constr_arcs = inner_join(id_name_drivers,drivers_constr_arcs,by="driverId")
drivers_constr_arcs = drivers_constr_arcs %>% select(-driverId,-constructorId) %>% rename(from=full_name,to=name)
nodes = as.data.frame(unique(rbind(constr_nodes,drivers_nodes)))
arcs = as.data.frame(unique(drivers_constr_arcs))
# filtering nodes with 0 arcs
nodes = nodes %>% filter(id %in% append(arcs$from,arcs$to))
vis.nodes <- nodes
vis.arcs <- arcs
# graphics paramemeters
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes = nodes %>% mutate(label=id)
vis.nodes$label = vis.nodes$id
vis.nodes$size = (vis.nodes$size +0.325)*65
vis.nodes$borderWidth <- 2 # Node border width
vis.arcs$color <- "gray"
vis.arcs$width <- 1
vis.arcs$shadow <- FALSE
net = visNetwork(vis.nodes, vis.arcs,background="white")
visOptions(net,highlightNearest = TRUE)
?visOptions
